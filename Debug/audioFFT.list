
audioFFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013478  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018640  08018640  00030010  2**0
                  CONTENTS
  4 .ARM          00000008  08018640  08018640  00028640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018648  08018648  00030010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018648  08018648  00028648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801864c  0801864c  0002864c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08018650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000556c  20000010  08018660  00030010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000557c  08018660  0003557c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001071e  00000000  00000000  000300f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026fb  00000000  00000000  0004080f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00042f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b81  00000000  00000000  00043e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017dd6  00000000  00000000  00044a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001291d  00000000  00000000  0005c7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b441  00000000  00000000  0006f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040e0  00000000  00000000  0010a548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0010e628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a9c  00000000  00000000  0010e66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0011110b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080051b0 	.word	0x080051b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080051b0 	.word	0x080051b0

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b970 	b.w	8000590 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9e08      	ldr	r6, [sp, #32]
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14a      	bne.n	800036e <__udivmoddi4+0xa6>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d965      	bls.n	80003aa <__udivmoddi4+0xe2>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa20 f202 	lsr.w	r2, r0, r2
 80002f2:	4317      	orrs	r7, r2
 80002f4:	409c      	lsls	r4, r3
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	4290      	cmp	r0, r2
 8000312:	d90a      	bls.n	800032a <__udivmoddi4+0x62>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	f080 811c 	bcs.w	8000558 <__udivmoddi4+0x290>
 8000320:	4290      	cmp	r0, r2
 8000322:	f240 8119 	bls.w	8000558 <__udivmoddi4+0x290>
 8000326:	3902      	subs	r1, #2
 8000328:	4462      	add	r2, ip
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	fb00 f505 	mul.w	r5, r0, r5
 800033e:	42a5      	cmp	r5, r4
 8000340:	d90a      	bls.n	8000358 <__udivmoddi4+0x90>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	f080 8107 	bcs.w	800055c <__udivmoddi4+0x294>
 800034e:	42a5      	cmp	r5, r4
 8000350:	f240 8104 	bls.w	800055c <__udivmoddi4+0x294>
 8000354:	4464      	add	r4, ip
 8000356:	3802      	subs	r0, #2
 8000358:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	2100      	movs	r1, #0
 8000360:	b11e      	cbz	r6, 800036a <__udivmoddi4+0xa2>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c6 4300 	strd	r4, r3, [r6]
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0xbc>
 8000372:	2e00      	cmp	r6, #0
 8000374:	f000 80ed 	beq.w	8000552 <__udivmoddi4+0x28a>
 8000378:	2100      	movs	r1, #0
 800037a:	e9c6 0500 	strd	r0, r5, [r6]
 800037e:	4608      	mov	r0, r1
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d149      	bne.n	8000420 <__udivmoddi4+0x158>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d302      	bcc.n	8000396 <__udivmoddi4+0xce>
 8000390:	4282      	cmp	r2, r0
 8000392:	f200 80f8 	bhi.w	8000586 <__udivmoddi4+0x2be>
 8000396:	1a84      	subs	r4, r0, r2
 8000398:	eb65 0203 	sbc.w	r2, r5, r3
 800039c:	2001      	movs	r0, #1
 800039e:	4617      	mov	r7, r2
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d0e2      	beq.n	800036a <__udivmoddi4+0xa2>
 80003a4:	e9c6 4700 	strd	r4, r7, [r6]
 80003a8:	e7df      	b.n	800036a <__udivmoddi4+0xa2>
 80003aa:	b902      	cbnz	r2, 80003ae <__udivmoddi4+0xe6>
 80003ac:	deff      	udf	#255	; 0xff
 80003ae:	fab2 f382 	clz	r3, r2
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x210>
 80003b8:	1a8a      	subs	r2, r1, r2
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2101      	movs	r1, #1
 80003c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c8:	fb07 2015 	mls	r0, r7, r5, r2
 80003cc:	0c22      	lsrs	r2, r4, #16
 80003ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d2:	fb0e f005 	mul.w	r0, lr, r5
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x124>
 80003da:	eb1c 0202 	adds.w	r2, ip, r2
 80003de:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x122>
 80003e4:	4290      	cmp	r0, r2
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f4:	fb07 2210 	mls	r2, r7, r0, r2
 80003f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2c2>
 8000414:	4610      	mov	r0, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041e:	e79f      	b.n	8000360 <__udivmoddi4+0x98>
 8000420:	f1c1 0720 	rsb	r7, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa05 f401 	lsl.w	r4, r5, r1
 8000432:	fa20 f307 	lsr.w	r3, r0, r7
 8000436:	40fd      	lsrs	r5, r7
 8000438:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	fb09 5518 	mls	r5, r9, r8, r5
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000450:	fb08 f50e 	mul.w	r5, r8, lr
 8000454:	42a5      	cmp	r5, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	fa00 f001 	lsl.w	r0, r0, r1
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2b4>
 800046c:	42a5      	cmp	r5, r4
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2b4>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4464      	add	r4, ip
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	b29d      	uxth	r5, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000488:	fb03 fe0e 	mul.w	lr, r3, lr
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1da>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f103 35ff 	add.w	r5, r3, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2ac>
 800049a:	45a6      	cmp	lr, r4
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2ac>
 800049e:	3b02      	subs	r3, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004a6:	fba3 9502 	umull	r9, r5, r3, r2
 80004aa:	eba4 040e 	sub.w	r4, r4, lr
 80004ae:	42ac      	cmp	r4, r5
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46ae      	mov	lr, r5
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x29c>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x298>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x208>
 80004ba:	ebb0 0208 	subs.w	r2, r0, r8
 80004be:	eb64 040e 	sbc.w	r4, r4, lr
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40ca      	lsrs	r2, r1
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	4317      	orrs	r7, r2
 80004cc:	e9c6 7400 	strd	r7, r4, [r6]
 80004d0:	4618      	mov	r0, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	f1c3 0120 	rsb	r1, r3, #32
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	fa20 f201 	lsr.w	r2, r0, r1
 80004e4:	fa25 f101 	lsr.w	r1, r5, r1
 80004e8:	409d      	lsls	r5, r3
 80004ea:	432a      	orrs	r2, r5
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f8:	fb07 1510 	mls	r5, r7, r0, r1
 80004fc:	0c11      	lsrs	r1, r2, #16
 80004fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000502:	fb00 f50e 	mul.w	r5, r0, lr
 8000506:	428d      	cmp	r5, r1
 8000508:	fa04 f403 	lsl.w	r4, r4, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x258>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 8000518:	428d      	cmp	r5, r1
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800051c:	3802      	subs	r0, #2
 800051e:	4461      	add	r1, ip
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5f7 	udiv	r5, r1, r7
 8000528:	fb07 1115 	mls	r1, r7, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f10e 	mul.w	r1, r5, lr
 8000534:	4291      	cmp	r1, r2
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x282>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2a8>
 8000542:	4291      	cmp	r1, r2
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2a8>
 8000546:	3d02      	subs	r5, #2
 8000548:	4462      	add	r2, ip
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0xfc>
 8000552:	4631      	mov	r1, r6
 8000554:	4630      	mov	r0, r6
 8000556:	e708      	b.n	800036a <__udivmoddi4+0xa2>
 8000558:	4639      	mov	r1, r7
 800055a:	e6e6      	b.n	800032a <__udivmoddi4+0x62>
 800055c:	4610      	mov	r0, r2
 800055e:	e6fb      	b.n	8000358 <__udivmoddi4+0x90>
 8000560:	4548      	cmp	r0, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f0>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb65 0e0c 	sbc.w	lr, r5, ip
 800056c:	3b01      	subs	r3, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f0>
 8000570:	4645      	mov	r5, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x282>
 8000574:	462b      	mov	r3, r5
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1da>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x258>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b0>
 8000580:	3d02      	subs	r5, #2
 8000582:	4462      	add	r2, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x124>
 8000586:	4608      	mov	r0, r1
 8000588:	e70a      	b.n	80003a0 <__udivmoddi4+0xd8>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x14e>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_TIM_PeriodElapsedCallback>:
#define SamplesFFT 2048
uint16_t adcValue[SamplesFFT];
float32_t input[SamplesFFT];
float32_t output[SamplesFFT];
uint32_t doConvert = SamplesFFT;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(doConvert >0) doConvert--;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d004      	beq.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1a>
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80005c6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fe02 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8e8 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa3a 	bl	8000a48 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 fa18 	bl	8000a08 <MX_DMA_Init>
  MX_ADC1_Init();
 80005d8:	f000 f94a 	bl	8000870 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005dc:	f000 f99a 	bl	8000914 <MX_I2C1_Init>
  MX_TIM3_Init();
 80005e0:	f000 f9c6 	bl	8000970 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_instance_f32 fftInstance;
  HAL_ADC_Start_DMA(&hadc1, adcValue, SamplesFFT);
 80005e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e8:	4967      	ldr	r1, [pc, #412]	; (8000788 <main+0x1c8>)
 80005ea:	4868      	ldr	r0, [pc, #416]	; (800078c <main+0x1cc>)
 80005ec:	f000 feca 	bl	8001384 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80005f0:	4867      	ldr	r0, [pc, #412]	; (8000790 <main+0x1d0>)
 80005f2:	f003 f9e7 	bl	80039c4 <HAL_TIM_Base_Start_IT>
  ssd1306_Init();
 80005f6:	f000 fab9 	bl	8000b6c <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	//2048개의 ADC�? ?��료되�?
  	if(doConvert == 0){
 80005fa:	4b66      	ldr	r3, [pc, #408]	; (8000794 <main+0x1d4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1fb      	bne.n	80005fa <main+0x3a>
  		doConvert = SamplesFFT;
 8000602:	4b64      	ldr	r3, [pc, #400]	; (8000794 <main+0x1d4>)
 8000604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000608:	601a      	str	r2, [r3, #0]
  		//FFT �?�?

  		for (int i = 0; i < SamplesFFT; i+=2) {
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000610:	e021      	b.n	8000656 <main+0x96>
  			input[i] = (float32_t)adcValue[i/2];
 8000612:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000616:	0fda      	lsrs	r2, r3, #31
 8000618:	4413      	add	r3, r2
 800061a:	105b      	asrs	r3, r3, #1
 800061c:	461a      	mov	r2, r3
 800061e:	4b5a      	ldr	r3, [pc, #360]	; (8000788 <main+0x1c8>)
 8000620:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800062c:	4a5a      	ldr	r2, [pc, #360]	; (8000798 <main+0x1d8>)
 800062e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	edc3 7a00 	vstr	s15, [r3]
  			input[i+1] = 0;
 800063a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800063e:	3301      	adds	r3, #1
 8000640:	4a55      	ldr	r2, [pc, #340]	; (8000798 <main+0x1d8>)
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	f04f 0200 	mov.w	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
  		for (int i = 0; i < SamplesFFT; i+=2) {
 800064c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000650:	3302      	adds	r3, #2
 8000652:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000656:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800065a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800065e:	dbd8      	blt.n	8000612 <main+0x52>
			}
  		arm_rfft_fast_init_f32(&fftInstance,SamplesFFT);
 8000660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fd95 	bl	8004198 <arm_rfft_fast_init_f32>
  		arm_rfft_fast_f32(&fftInstance, input, output, 0);
 800066e:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8000672:	2300      	movs	r3, #0
 8000674:	4a49      	ldr	r2, [pc, #292]	; (800079c <main+0x1dc>)
 8000676:	4948      	ldr	r1, [pc, #288]	; (8000798 <main+0x1d8>)
 8000678:	f003 fe10 	bl	800429c <arm_rfft_fast_f32>

  		//출력 결과�? 128개로 분할
  		uint32_t showData[128] = {0,};
 800067c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000680:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000684:	4618      	mov	r0, r3
 8000686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068a:	461a      	mov	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f004 fd63 	bl	8005158 <memset>
  		for(int i = 0; i<128; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000698:	e047      	b.n	800072a <main+0x16a>
  			for(int j = 0; j <8; j++){
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80006a0:	e029      	b.n	80006f6 <main+0x136>
  				showData[i] += output[i*8+j];
 80006a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006a6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80006aa:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80006ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006ba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80006be:	00da      	lsls	r2, r3, #3
 80006c0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80006c4:	4413      	add	r3, r2
 80006c6:	4a35      	ldr	r2, [pc, #212]	; (800079c <main+0x1dc>)
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d8:	ee17 1a90 	vmov	r1, s15
 80006dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006e0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80006e4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80006e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  			for(int j = 0; j <8; j++){
 80006ec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80006f0:	3301      	adds	r3, #1
 80006f2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80006f6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	ddd1      	ble.n	80006a2 <main+0xe2>
  			}
  			showData[i] /= 128;
 80006fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000702:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000706:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800070a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800070e:	09d9      	lsrs	r1, r3, #7
 8000710:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000714:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000718:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800071c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  		for(int i = 0; i<128; i++){
 8000720:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000724:	3301      	adds	r3, #1
 8000726:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800072a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800072e:	2b7f      	cmp	r3, #127	; 0x7f
 8000730:	ddb3      	ble.n	800069a <main+0xda>
  		}
  		// OLED ?��?��
  		ssd1306_Fill(0);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fa84 	bl	8000c40 <ssd1306_Fill>
  		for(int i = 0; i < 128; i++){
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800073e:	e01c      	b.n	800077a <main+0x1ba>
  			ssd1306_Line(i, 63, i, 64-showData[i], 1);
 8000740:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000744:	b2d8      	uxtb	r0, r3
 8000746:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800074a:	b2d9      	uxtb	r1, r3
 800074c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000750:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000754:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2201      	movs	r2, #1
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	460a      	mov	r2, r1
 800076a:	213f      	movs	r1, #63	; 0x3f
 800076c:	f000 fb08 	bl	8000d80 <ssd1306_Line>
  		for(int i = 0; i < 128; i++){
 8000770:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000774:	3301      	adds	r3, #1
 8000776:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800077a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800077e:	2b7f      	cmp	r3, #127	; 0x7f
 8000780:	ddde      	ble.n	8000740 <main+0x180>

  		}
  		ssd1306_UpdateScreen();
 8000782:	f000 fa81 	bl	8000c88 <ssd1306_UpdateScreen>
  	if(doConvert == 0){
 8000786:	e738      	b.n	80005fa <main+0x3a>
 8000788:	20000170 	.word	0x20000170
 800078c:	2000002c 	.word	0x2000002c
 8000790:	20000128 	.word	0x20000128
 8000794:	20000000 	.word	0x20000000
 8000798:	20001170 	.word	0x20001170
 800079c:	20003170 	.word	0x20003170

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fcd2 	bl	8005158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <SystemClock_Config+0xc8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a26      	ldr	r2, [pc, #152]	; (8000868 <SystemClock_Config+0xc8>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <SystemClock_Config+0xc8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <SystemClock_Config+0xcc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <SystemClock_Config+0xcc>)
 80007ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <SystemClock_Config+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fc39 	bl	800309c <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000830:	f000 f94e 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2103      	movs	r1, #3
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fe9b 	bl	800358c <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800085c:	f000 f938 	bl	8000ad0 <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3750      	adds	r7, #80	; 0x50
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_ADC1_Init+0x9c>)
 8000884:	4a22      	ldr	r2, [pc, #136]	; (8000910 <MX_ADC1_Init+0xa0>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_ADC1_Init+0x9c>)
 800088a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800088e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ADC1_Init+0x9c>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ADC1_Init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_ADC1_Init+0x9c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ADC1_Init+0x9c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_ADC1_Init+0x9c>)
 80008ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_ADC1_Init+0x9c>)
 80008b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ADC1_Init+0x9c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_ADC1_Init+0x9c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_ADC1_Init+0x9c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_ADC1_Init+0x9c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_ADC1_Init+0x9c>)
 80008d6:	f000 fd11 	bl	80012fc <HAL_ADC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80008e0:	f000 f8f6 	bl	8000ad0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_ADC1_Init+0x9c>)
 80008f6:	f000 fe53 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000900:	f000 f8e6 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000002c 	.word	0x2000002c
 8000910:	40012000 	.word	0x40012000

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x50>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_I2C1_Init+0x54>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x50>)
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_I2C1_Init+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_I2C1_Init+0x50>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C1_Init+0x50>)
 8000952:	f001 fef5 	bl	8002740 <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800095c:	f000 f8b8 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000d4 	.word	0x200000d4
 8000968:	40005400 	.word	0x40005400
 800096c:	00061a80 	.word	0x00061a80

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_TIM3_Init+0x90>)
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <MX_TIM3_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_TIM3_Init+0x90>)
 8000994:	2263      	movs	r2, #99	; 0x63
 8000996:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_TIM3_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25-1;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_TIM3_Init+0x90>)
 80009a0:	2218      	movs	r2, #24
 80009a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_TIM3_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM3_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_TIM3_Init+0x90>)
 80009b2:	f002 ffb7 	bl	8003924 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80009bc:	f000 f888 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM3_Init+0x90>)
 80009ce:	f003 f94b 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80009d8:	f000 f87a 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009dc:	2320      	movs	r3, #32
 80009de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM3_Init+0x90>)
 80009ea:	f003 fb53 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009f4:	f000 f86c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000128 	.word	0x20000128
 8000a04:	40000400 	.word	0x40000400

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2038      	movs	r0, #56	; 0x38
 8000a30:	f001 f941 	bl	8001cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a34:	2038      	movs	r0, #56	; 0x38
 8000a36:	f001 f95a 	bl	8001cee <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_GPIO_Init+0x80>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <MX_GPIO_Init+0x80>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_GPIO_Init+0x80>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_GPIO_Init+0x80>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x80>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_GPIO_Init+0x80>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x84>)
 8000a9e:	f001 fe35 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8000aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_GPIO_Init+0x84>)
 8000abc:	f001 fca2 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <ssd1306_Reset+0x28>)
 8000ae8:	f001 fe10 	bl	800270c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f000 fbe1 	bl	80012b4 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <ssd1306_Reset+0x28>)
 8000afa:	f001 fe07 	bl	800270c <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40020000 	.word	0x40020000

08000b08 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	2200      	movs	r2, #0
 8000b24:	2178      	movs	r1, #120	; 0x78
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <ssd1306_WriteCommand+0x2c>)
 8000b28:	f001 ff4e 	bl	80029c8 <HAL_I2C_Mem_Write>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000d4 	.word	0x200000d4

08000b38 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af04      	add	r7, sp, #16
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4a:	9202      	str	r2, [sp, #8]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	2240      	movs	r2, #64	; 0x40
 8000b56:	2178      	movs	r1, #120	; 0x78
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <ssd1306_WriteData+0x30>)
 8000b5a:	f001 ff35 	bl	80029c8 <HAL_I2C_Mem_Write>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000d4 	.word	0x200000d4

08000b6c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b70:	f7ff ffb4 	bl	8000adc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b74:	2064      	movs	r0, #100	; 0x64
 8000b76:	f000 fb9d 	bl	80012b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f980 	bl	8000e80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b80:	2020      	movs	r0, #32
 8000b82:	f7ff ffc1 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ffbe 	bl	8000b08 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b8c:	20b0      	movs	r0, #176	; 0xb0
 8000b8e:	f7ff ffbb 	bl	8000b08 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b92:	20c8      	movs	r0, #200	; 0xc8
 8000b94:	f7ff ffb8 	bl	8000b08 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff ffb5 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b9e:	2010      	movs	r0, #16
 8000ba0:	f7ff ffb2 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ba4:	2040      	movs	r0, #64	; 0x40
 8000ba6:	f7ff ffaf 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	f000 f954 	bl	8000e58 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bb0:	20a1      	movs	r0, #161	; 0xa1
 8000bb2:	f7ff ffa9 	bl	8000b08 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bb6:	20a6      	movs	r0, #166	; 0xa6
 8000bb8:	f7ff ffa6 	bl	8000b08 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bbc:	20a8      	movs	r0, #168	; 0xa8
 8000bbe:	f7ff ffa3 	bl	8000b08 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bc2:	203f      	movs	r0, #63	; 0x3f
 8000bc4:	f7ff ffa0 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bc8:	20a4      	movs	r0, #164	; 0xa4
 8000bca:	f7ff ff9d 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bce:	20d3      	movs	r0, #211	; 0xd3
 8000bd0:	f7ff ff9a 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff ff97 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bda:	20d5      	movs	r0, #213	; 0xd5
 8000bdc:	f7ff ff94 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000be0:	20f0      	movs	r0, #240	; 0xf0
 8000be2:	f7ff ff91 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000be6:	20d9      	movs	r0, #217	; 0xd9
 8000be8:	f7ff ff8e 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bec:	2022      	movs	r0, #34	; 0x22
 8000bee:	f7ff ff8b 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bf2:	20da      	movs	r0, #218	; 0xda
 8000bf4:	f7ff ff88 	bl	8000b08 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bf8:	2012      	movs	r0, #18
 8000bfa:	f7ff ff85 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bfe:	20db      	movs	r0, #219	; 0xdb
 8000c00:	f7ff ff82 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c04:	2020      	movs	r0, #32
 8000c06:	f7ff ff7f 	bl	8000b08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c0a:	208d      	movs	r0, #141	; 0x8d
 8000c0c:	f7ff ff7c 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c10:	2014      	movs	r0, #20
 8000c12:	f7ff ff79 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 f932 	bl	8000e80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 f80f 	bl	8000c40 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c22:	f000 f831 	bl	8000c88 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <ssd1306_Init+0xd0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <ssd1306_Init+0xd0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c32:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <ssd1306_Init+0xd0>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	711a      	strb	r2, [r3, #4]
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20005570 	.word	0x20005570

08000c40 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e00d      	b.n	8000c6c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <ssd1306_Fill+0x1a>
 8000c56:	2100      	movs	r1, #0
 8000c58:	e000      	b.n	8000c5c <ssd1306_Fill+0x1c>
 8000c5a:	21ff      	movs	r1, #255	; 0xff
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <ssd1306_Fill+0x44>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	460a      	mov	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c72:	d3ed      	bcc.n	8000c50 <ssd1306_Fill+0x10>
    }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20005170 	.word	0x20005170

08000c88 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e016      	b.n	8000cc2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	3b50      	subs	r3, #80	; 0x50
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff34 	bl	8000b08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff ff31 	bl	8000b08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f7ff ff2e 	bl	8000b08 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	01db      	lsls	r3, r3, #7
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <ssd1306_UpdateScreen+0x4c>)
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff3e 	bl	8000b38 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d9e5      	bls.n	8000c94 <ssd1306_UpdateScreen+0xc>
    }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20005170 	.word	0x20005170

08000cd8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db3d      	blt.n	8000d6e <ssd1306_DrawPixel+0x96>
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf6:	d83a      	bhi.n	8000d6e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cf8:	797b      	ldrb	r3, [r7, #5]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d11a      	bne.n	8000d34 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <ssd1306_DrawPixel+0xa4>)
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b259      	sxtb	r1, r3
 8000d24:	79fa      	ldrb	r2, [r7, #7]
 8000d26:	4603      	mov	r3, r0
 8000d28:	01db      	lsls	r3, r3, #7
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2c9      	uxtb	r1, r1
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <ssd1306_DrawPixel+0xa4>)
 8000d30:	54d1      	strb	r1, [r2, r3]
 8000d32:	e01d      	b.n	8000d70 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	b2d8      	uxtb	r0, r3
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4413      	add	r3, r2
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <ssd1306_DrawPixel+0xa4>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	b259      	sxtb	r1, r3
 8000d5e:	79fa      	ldrb	r2, [r7, #7]
 8000d60:	4603      	mov	r3, r0
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4413      	add	r3, r2
 8000d66:	b2c9      	uxtb	r1, r1
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <ssd1306_DrawPixel+0xa4>)
 8000d6a:	54d1      	strb	r1, [r2, r3]
 8000d6c:	e000      	b.n	8000d70 <ssd1306_DrawPixel+0x98>
        return;
 8000d6e:	bf00      	nop
    }
}
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20005170 	.word	0x20005170

08000d80 <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4604      	mov	r4, r0
 8000d88:	4608      	mov	r0, r1
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4623      	mov	r3, r4
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	4603      	mov	r3, r0
 8000d94:	71bb      	strb	r3, [r7, #6]
 8000d96:	460b      	mov	r3, r1
 8000d98:	717b      	strb	r3, [r7, #5]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8000d9e:	797a      	ldrb	r2, [r7, #5]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bfb8      	it	lt
 8000da8:	425b      	neglt	r3, r3
 8000daa:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000dac:	793a      	ldrb	r2, [r7, #4]
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bfb8      	it	lt
 8000db6:	425b      	neglt	r3, r3
 8000db8:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d201      	bcs.n	8000dc6 <ssd1306_Line+0x46>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e001      	b.n	8000dca <ssd1306_Line+0x4a>
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	793b      	ldrb	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d201      	bcs.n	8000dd8 <ssd1306_Line+0x58>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e001      	b.n	8000ddc <ssd1306_Line+0x5c>
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8000de6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000dea:	7939      	ldrb	r1, [r7, #4]
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff72 	bl	8000cd8 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8000df4:	e024      	b.n	8000e40 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8000df6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000dfa:	79b9      	ldrb	r1, [r7, #6]
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff6a 	bl	8000cd8 <ssd1306_DrawPixel>
    error2 = error * 2;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	425b      	negs	r3, r3
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dd08      	ble.n	8000e26 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	4413      	add	r3, r2
 8000e24:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	da08      	bge.n	8000e40 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	4413      	add	r3, r2
 8000e34:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d1d6      	bne.n	8000df6 <ssd1306_Line+0x76>
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d1d2      	bne.n	8000df6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8000e50:	bf00      	nop
}
 8000e52:	3724      	adds	r7, #36	; 0x24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}

08000e58 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e62:	2381      	movs	r3, #129	; 0x81
 8000e64:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe4d 	bl	8000b08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe49 	bl	8000b08 <ssd1306_WriteCommand>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000e90:	23af      	movs	r3, #175	; 0xaf
 8000e92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <ssd1306_SetDisplayOn+0x38>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	715a      	strb	r2, [r3, #5]
 8000e9a:	e004      	b.n	8000ea6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000e9c:	23ae      	movs	r3, #174	; 0xae
 8000e9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <ssd1306_SetDisplayOn+0x38>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe2d 	bl	8000b08 <ssd1306_WriteCommand>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20005570 	.word	0x20005570

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <HAL_ADC_MspInit+0xdc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d157      	bne.n	8000fde <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <HAL_ADC_MspInit+0xe4>)
 8000f7a:	f001 fa43 	bl	8002404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_ADC_MspInit+0xec>)
 8000f82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fc4:	f000 feae 	bl	8001d24 <HAL_DMA_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fce:	f7ff fd7f 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012000 	.word	0x40012000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	20000074 	.word	0x20000074
 8000ff8:	40026410 	.word	0x40026410

08000ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_I2C_MspInit+0x84>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12b      	bne.n	8001076 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_I2C_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_I2C_MspInit+0x88>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_I2C_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800103a:	23c0      	movs	r3, #192	; 0xc0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	2312      	movs	r3, #18
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104a:	2304      	movs	r3, #4
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <HAL_I2C_MspInit+0x8c>)
 8001056:	f001 f9d5 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_I2C_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_I2C_MspInit+0x88>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_I2C_MspInit+0x88>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40005400 	.word	0x40005400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_TIM_Base_MspInit+0x48>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d115      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_TIM_Base_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0x4c>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	201d      	movs	r0, #29
 80010c0:	f000 fdf9 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c4:	201d      	movs	r0, #29
 80010c6:	f000 fe12 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40000400 	.word	0x40000400
 80010d8:	40023800 	.word	0x40023800

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	e7fe      	b.n	80010e0 <NMI_Handler+0x4>

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler+0x4>

080010ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001128:	f000 f8a4 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM3_IRQHandler+0x10>)
 8001136:	f002 fca7 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000128 	.word	0x20000128

08001144 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA2_Stream0_IRQHandler+0x10>)
 800114a:	f000 fef1 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000074 	.word	0x20000074

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001180:	f7ff ffea 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011aa:	f003 ffdd 	bl	8005168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ae:	f7ff fa07 	bl	80005c0 <main>
  bx  lr    
 80011b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011c0:	08018650 	.word	0x08018650
  ldr r2, =_sbss
 80011c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011c8:	2000557c 	.word	0x2000557c

080011cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_Init+0x40>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_Init+0x40>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x40>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fd51 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fe5a 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd69 	bl	8001d0a <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 fd31 	bl	8001cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000004 	.word	0x20000004
 800126c:	2000000c 	.word	0x2000000c
 8001270:	20000008 	.word	0x20000008

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20005578 	.word	0x20005578

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20005578 	.word	0x20005578

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000000c 	.word	0x2000000c

080012fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e033      	b.n	800137a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fdf6 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001342:	f023 0302 	bic.w	r3, r3, #2
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa58 	bl	8001804 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
 800136a:	e001      	b.n	8001370 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Start_DMA+0x1e>
 800139e:	2302      	movs	r3, #2
 80013a0:	e0ce      	b.n	8001540 <HAL_ADC_Start_DMA+0x1bc>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d018      	beq.n	80013ea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c8:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_ADC_Start_DMA+0x1c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a5f      	ldr	r2, [pc, #380]	; (800154c <HAL_ADC_Start_DMA+0x1c8>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9a      	lsrs	r2, r3, #18
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f9      	bne.n	80013de <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f8:	d107      	bne.n	800140a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001408:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 8086 	bne.w	8001526 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001458:	d106      	bne.n	8001468 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f023 0206 	bic.w	r2, r3, #6
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
 8001466:	e002      	b.n	800146e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_ADC_Start_DMA+0x1cc>)
 8001478:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	4a35      	ldr	r2, [pc, #212]	; (8001554 <HAL_ADC_Start_DMA+0x1d0>)
 8001480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <HAL_ADC_Start_DMA+0x1d4>)
 8001488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	4a33      	ldr	r2, [pc, #204]	; (800155c <HAL_ADC_Start_DMA+0x1d8>)
 8001490:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800149a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014aa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	334c      	adds	r3, #76	; 0x4c
 80014c6:	4619      	mov	r1, r3
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f000 fcd8 	bl	8001e80 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10f      	bne.n	80014fc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d129      	bne.n	800153e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	e020      	b.n	800153e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <HAL_ADC_Start_DMA+0x1dc>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d11b      	bne.n	800153e <HAL_ADC_Start_DMA+0x1ba>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d114      	bne.n	800153e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	e00b      	b.n	800153e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000004 	.word	0x20000004
 800154c:	431bde83 	.word	0x431bde83
 8001550:	40012300 	.word	0x40012300
 8001554:	080019fd 	.word	0x080019fd
 8001558:	08001ab7 	.word	0x08001ab7
 800155c:	08001ad3 	.word	0x08001ad3
 8001560:	40012000 	.word	0x40012000

08001564 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e113      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x244>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d925      	bls.n	8001618 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68d9      	ldr	r1, [r3, #12]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68d9      	ldr	r1, [r3, #12]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	4603      	mov	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4403      	add	r3, r0
 800160a:	3b1e      	subs	r3, #30
 800160c:	409a      	lsls	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	e022      	b.n	800165e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	2207      	movs	r2, #7
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4618      	mov	r0, r3
 800164e:	4603      	mov	r3, r0
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4403      	add	r3, r0
 8001654:	409a      	lsls	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d824      	bhi.n	80016b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b05      	subs	r3, #5
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b05      	subs	r3, #5
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
 80016ae:	e04c      	b.n	800174a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	d824      	bhi.n	8001702 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b23      	subs	r3, #35	; 0x23
 80016ca:	221f      	movs	r2, #31
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43da      	mvns	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	400a      	ands	r2, r1
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3b23      	subs	r3, #35	; 0x23
 80016f4:	fa00 f203 	lsl.w	r2, r0, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001700:	e023      	b.n	800174a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b41      	subs	r3, #65	; 0x41
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	400a      	ands	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b41      	subs	r3, #65	; 0x41
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_ADC_ConfigChannel+0x250>)
 800174c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <HAL_ADC_ConfigChannel+0x254>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d10f      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d8>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b12      	cmp	r3, #18
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_ADC_ConfigChannel+0x254>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_ADC_ConfigChannel+0x23a>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_ADC_ConfigChannel+0x258>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d003      	beq.n	8001794 <HAL_ADC_ConfigChannel+0x1f4>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b11      	cmp	r3, #17
 8001792:	d122      	bne.n	80017da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_ADC_ConfigChannel+0x258>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d111      	bne.n	80017da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_ADC_ConfigChannel+0x25c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_ADC_ConfigChannel+0x260>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	0c9a      	lsrs	r2, r3, #18
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f9      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40012300 	.word	0x40012300
 80017f4:	40012000 	.word	0x40012000
 80017f8:	10000012 	.word	0x10000012
 80017fc:	20000004 	.word	0x20000004
 8001800:	431bde83 	.word	0x431bde83

08001804 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180c:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <ADC_Init+0x1f0>)
 800180e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001838:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	021a      	lsls	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800185c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <ADC_Init+0x1f4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	e00f      	b.n	8001902 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001900:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0202 	bic.w	r2, r2, #2
 8001910:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e1b      	ldrb	r3, [r3, #24]
 800191c:	005a      	lsls	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01b      	beq.n	8001968 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800193e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800194e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	3b01      	subs	r3, #1
 800195c:	035a      	lsls	r2, r3, #13
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	e007      	b.n	8001978 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001976:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	3b01      	subs	r3, #1
 8001994:	051a      	lsls	r2, r3, #20
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ba:	025a      	lsls	r2, r3, #9
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6899      	ldr	r1, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	029a      	lsls	r2, r3, #10
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40012300 	.word	0x40012300
 80019f8:	0f000001 	.word	0x0f000001

080019fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d13c      	bne.n	8001a90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d12b      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d127      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d119      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0220 	bic.w	r2, r2, #32
 8001a62:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fd6b 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a8e:	e00e      	b.n	8001aae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff fd75 	bl	800158c <HAL_ADC_ErrorCallback>
}
 8001aa2:	e004      	b.n	8001aae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fd57 	bl	8001578 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fd4a 	bl	800158c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <__NVIC_EnableIRQ+0x38>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c6c:	d301      	bcc.n	8001c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <SysTick_Config+0x40>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f7ff ff8e 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SysTick_Config+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SysTick_Config+0x40>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff29 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff3e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff8e 	bl	8001bf4 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5d 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff31 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa2 	bl	8001c5c <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff fab4 	bl	800129c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e099      	b.n	8001e74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d60:	e00f      	b.n	8001d82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d62:	f7ff fa9b 	bl	800129c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d908      	bls.n	8001d82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e078      	b.n	8001e74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e8      	bne.n	8001d62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_DMA_Init+0x158>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d107      	bne.n	8001dec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4313      	orrs	r3, r2
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f023 0307 	bic.w	r3, r3, #7
 8001e02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d117      	bne.n	8001e46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fa6f 	bl	800230c <DMA_CheckFifoParam>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e42:	2301      	movs	r3, #1
 8001e44:	e016      	b.n	8001e74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa26 	bl	80022a0 <DMA_CalcBaseAndBitshift>
 8001e54:	4603      	mov	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	223f      	movs	r2, #63	; 0x3f
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f010803f 	.word	0xf010803f

08001e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Start_IT+0x26>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e040      	b.n	8001f28 <HAL_DMA_Start_IT+0xa8>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d12f      	bne.n	8001f1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f9b8 	bl	8002244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0216 	orr.w	r2, r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0208 	orr.w	r2, r2, #8
 8001f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e005      	b.n	8001f26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f3c:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <HAL_DMA_IRQHandler+0x248>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a8e      	ldr	r2, [pc, #568]	; (800217c <HAL_DMA_IRQHandler+0x24c>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0a9b      	lsrs	r3, r3, #10
 8001f48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2208      	movs	r2, #8
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d012      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2210      	movs	r2, #16
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d043      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03c      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2210      	movs	r2, #16
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d018      	beq.n	8002072 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d024      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
 800205e:	e01f      	b.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e016      	b.n	80020a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0208 	bic.w	r2, r2, #8
 800208e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2220      	movs	r2, #32
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 808f 	beq.w	80021d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8087 	beq.w	80021d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2220      	movs	r2, #32
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d136      	bne.n	8002148 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0216 	bic.w	r2, r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <HAL_DMA_IRQHandler+0x1da>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0208 	bic.w	r2, r2, #8
 8002118:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	223f      	movs	r2, #63	; 0x3f
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07e      	beq.n	800223c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
        }
        return;
 8002146:	e079      	b.n	800223c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01d      	beq.n	8002192 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10d      	bne.n	8002180 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	2b00      	cmp	r3, #0
 800216a:	d031      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e02c      	b.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
 8002176:	bf00      	nop
 8002178:	20000004 	.word	0x20000004
 800217c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
 8002190:	e01e      	b.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0210 	bic.w	r2, r2, #16
 80021ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d032      	beq.n	800223e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d022      	beq.n	800222a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2205      	movs	r2, #5
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3301      	adds	r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	d307      	bcc.n	8002218 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f2      	bne.n	80021fc <HAL_DMA_IRQHandler+0x2cc>
 8002216:	e000      	b.n	800221a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002218:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
 800223a:	e000      	b.n	800223e <HAL_DMA_IRQHandler+0x30e>
        return;
 800223c:	bf00      	nop
    }
  }
}
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d108      	bne.n	8002284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002282:	e007      	b.n	8002294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3b10      	subs	r3, #16
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <DMA_CalcBaseAndBitshift+0x64>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <DMA_CalcBaseAndBitshift+0x68>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d909      	bls.n	80022e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	; 0x58
 80022e0:	e007      	b.n	80022f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	aaaaaaab 	.word	0xaaaaaaab
 8002308:	080051e0 	.word	0x080051e0

0800230c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11f      	bne.n	8002366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d856      	bhi.n	80023da <DMA_CheckFifoParam+0xce>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <DMA_CheckFifoParam+0x28>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002345 	.word	0x08002345
 8002338:	08002357 	.word	0x08002357
 800233c:	08002345 	.word	0x08002345
 8002340:	080023db 	.word	0x080023db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d046      	beq.n	80023de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e043      	b.n	80023de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800235e:	d140      	bne.n	80023e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e03d      	b.n	80023e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	d121      	bne.n	80023b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d837      	bhi.n	80023e6 <DMA_CheckFifoParam+0xda>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <DMA_CheckFifoParam+0x70>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002393 	.word	0x08002393
 8002384:	0800238d 	.word	0x0800238d
 8002388:	080023a5 	.word	0x080023a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e030      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d025      	beq.n	80023ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a2:	e022      	b.n	80023ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ac:	d11f      	bne.n	80023ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023b2:	e01c      	b.n	80023ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d903      	bls.n	80023c2 <DMA_CheckFifoParam+0xb6>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d003      	beq.n	80023c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023c0:	e018      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      break;
 80023c6:	e015      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e00b      	b.n	80023f2 <DMA_CheckFifoParam+0xe6>
      break;
 80023da:	bf00      	nop
 80023dc:	e00a      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e008      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e006      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
 80023e8:	e004      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
 80023ec:	e002      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
    }
  } 
  
  return status; 
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e159      	b.n	80026d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8148 	bne.w	80026ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a2 	beq.w	80026ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_GPIO_Init+0x2ec>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	; (80026f4 <HAL_GPIO_Init+0x2f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x202>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_GPIO_Init+0x2f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x1fe>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_GPIO_Init+0x2f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x1fa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x1f6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	; (8002704 <HAL_GPIO_Init+0x300>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x1f2>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	; (80026f0 <HAL_GPIO_Init+0x2ec>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_GPIO_Init+0x304>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f aea2 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e12b      	b.n	80029aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fc48 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	; 0x24
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a4:	f001 f8aa 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a81      	ldr	r2, [pc, #516]	; (80029b4 <HAL_I2C_Init+0x274>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <HAL_I2C_Init+0x84>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a80      	ldr	r2, [pc, #512]	; (80029b8 <HAL_I2C_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e006      	b.n	80027d2 <HAL_I2C_Init+0x92>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7d      	ldr	r2, [pc, #500]	; (80029bc <HAL_I2C_Init+0x27c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0e7      	b.n	80029aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a78      	ldr	r2, [pc, #480]	; (80029c0 <HAL_I2C_Init+0x280>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a6a      	ldr	r2, [pc, #424]	; (80029b4 <HAL_I2C_Init+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d802      	bhi.n	8002814 <HAL_I2C_Init+0xd4>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	e009      	b.n	8002828 <HAL_I2C_Init+0xe8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a69      	ldr	r2, [pc, #420]	; (80029c4 <HAL_I2C_Init+0x284>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800283a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	495c      	ldr	r1, [pc, #368]	; (80029b4 <HAL_I2C_Init+0x274>)
 8002844:	428b      	cmp	r3, r1
 8002846:	d819      	bhi.n	800287c <HAL_I2C_Init+0x13c>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e59      	subs	r1, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800285c:	400b      	ands	r3, r1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_I2C_Init+0x138>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	e051      	b.n	800291c <HAL_I2C_Init+0x1dc>
 8002878:	2304      	movs	r3, #4
 800287a:	e04f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_I2C_Init+0x168>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e012      	b.n	80028ce <HAL_I2C_Init+0x18e>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Init+0x196>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_I2C_Init+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e58      	subs	r0, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	000186a0 	.word	0x000186a0
 80029b8:	001e847f 	.word	0x001e847f
 80029bc:	003d08ff 	.word	0x003d08ff
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e2:	f7fe fc5b 	bl	800129c <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80d9 	bne.w	8002ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2319      	movs	r3, #25
 80029fc:	2201      	movs	r2, #1
 80029fe:	496d      	ldr	r1, [pc, #436]	; (8002bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f971 	bl	8002ce8 <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0cc      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_I2C_Mem_Write+0x56>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0c5      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2221      	movs	r2, #33	; 0x21
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a3a      	ldr	r2, [r7, #32]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a4d      	ldr	r2, [pc, #308]	; (8002bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a86:	88f8      	ldrh	r0, [r7, #6]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4603      	mov	r3, r0
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f890 	bl	8002bbc <I2C_RequestMemoryWrite>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d052      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e081      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fa36 	bl	8002f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d107      	bne.n	8002ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_I2C_Mem_Write+0x180>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1aa      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fa29 	bl	8002fac <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e016      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	00100002 	.word	0x00100002
 8002bb8:	ffff0000 	.word	0xffff0000

08002bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	813b      	strh	r3, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f878 	bl	8002ce8 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0c:	d103      	bne.n	8002c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e05f      	b.n	8002cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	492d      	ldr	r1, [pc, #180]	; (8002ce4 <I2C_RequestMemoryWrite+0x128>)
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f8d3 	bl	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e04c      	b.n	8002cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f95e 	bl	8002f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d107      	bne.n	8002c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02b      	b.n	8002cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c88:	893b      	ldrh	r3, [r7, #8]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	e021      	b.n	8002cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c94:	893b      	ldrh	r3, [r7, #8]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f938 	bl	8002f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d107      	bne.n	8002cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e005      	b.n	8002cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cce:	893b      	ldrh	r3, [r7, #8]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	00010002 	.word	0x00010002

08002ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf8:	e048      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d044      	beq.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7fe facb 	bl	800129c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d139      	bne.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10d      	bne.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	e00c      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d116      	bne.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e023      	b.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10d      	bne.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	e00c      	b.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d093      	beq.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dea:	e071      	b.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d123      	bne.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e067      	b.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d041      	beq.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4c:	f7fe fa26 	bl	800129c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d136      	bne.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10c      	bne.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e00b      	b.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e021      	b.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10c      	bne.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e00b      	b.n	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f af6d 	bne.w	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f28:	e034      	b.n	8002f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f886 	bl	800303c <I2C_IsAcknowledgeFailed>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e034      	b.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d028      	beq.n	8002f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fe f9ab 	bl	800129c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11d      	bne.n	8002f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d016      	beq.n	8002f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d1c3      	bne.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb8:	e034      	b.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f83e 	bl	800303c <I2C_IsAcknowledgeFailed>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e034      	b.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d028      	beq.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe f963 	bl	800129c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11d      	bne.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d016      	beq.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e007      	b.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d1c3      	bne.n	8002fba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d11b      	bne.n	800308c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800305c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e267      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e242      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe f8a2 	bl	800129c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe f89e 	bl	800129c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e207      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe f88e 	bl	800129c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe f88a 	bl	800129c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f3      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c7      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe f843 	bl	800129c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7fe f83f 	bl	800129c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a8      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe f822 	bl	800129c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7fe f81e 	bl	800129c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e187      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe f802 	bl	800129c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fd fffe 	bl	800129c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e167      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fd ffeb 	bl	800129c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fd ffe7 	bl	800129c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e150      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7d      	ldr	r3, [pc, #500]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a7c      	ldr	r2, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b7a      	ldr	r3, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b77      	ldr	r3, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b74      	ldr	r3, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fd ffa7 	bl	800129c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fd ffa3 	bl	800129c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e10c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b64      	ldr	r3, [pc, #400]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b58      	ldr	r3, [pc, #352]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b55      	ldr	r3, [pc, #340]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a54      	ldr	r2, [pc, #336]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd ff68 	bl	800129c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fd ff64 	bl	800129c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0cb      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fd ff52 	bl	800129c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fd ff4e 	bl	800129c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b5      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b3e      	ldr	r3, [pc, #248]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a38      	ldr	r2, [pc, #224]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a1 	beq.w	800357c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d05c      	beq.n	8003500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d141      	bne.n	80034d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd ff22 	bl	800129c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd ff1e 	bl	800129c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e087      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fd fef7 	bl	800129c <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd fef3 	bl	800129c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e05c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x416>
 80034d0:	e054      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd fee0 	bl	800129c <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd fedc 	bl	800129c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e045      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e038      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4ec>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d028      	beq.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d121      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11a      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fd fe0e 	bl	800129c <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fd fe0a 	bl	800129c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fd6e 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	080051c8 	.word	0x080051c8
 8003750:	20000004 	.word	0x20000004
 8003754:	20000008 	.word	0x20000008

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b090      	sub	sp, #64	; 0x40
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
 8003764:	2300      	movs	r3, #0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003768:	2300      	movs	r3, #0
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80a1 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e09b      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_GetSysClockFreq+0x184>)
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003790:	e09b      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003796:	e098      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c0:	2100      	movs	r1, #0
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c4:	fb03 f201 	mul.w	r2, r3, r1
 80037c8:	2300      	movs	r3, #0
 80037ca:	fb00 f303 	mul.w	r3, r0, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	4a43      	ldr	r2, [pc, #268]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d2:	fba0 1202 	umull	r1, r2, r0, r2
 80037d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d8:	460a      	mov	r2, r1
 80037da:	62ba      	str	r2, [r7, #40]	; 0x28
 80037dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037de:	4413      	add	r3, r2
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e4:	2200      	movs	r2, #0
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037f2:	f7fc fd51 	bl	8000298 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4613      	mov	r3, r2
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fe:	e053      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	2200      	movs	r2, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	617a      	str	r2, [r7, #20]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003812:	f04f 0b00 	mov.w	fp, #0
 8003816:	4652      	mov	r2, sl
 8003818:	465b      	mov	r3, fp
 800381a:	f04f 0000 	mov.w	r0, #0
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	0159      	lsls	r1, r3, #5
 8003824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003828:	0150      	lsls	r0, r2, #5
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	ebb2 080a 	subs.w	r8, r2, sl
 8003832:	eb63 090b 	sbc.w	r9, r3, fp
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003842:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003846:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800384a:	ebb2 0408 	subs.w	r4, r2, r8
 800384e:	eb63 0509 	sbc.w	r5, r3, r9
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	00eb      	lsls	r3, r5, #3
 800385c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003860:	00e2      	lsls	r2, r4, #3
 8003862:	4614      	mov	r4, r2
 8003864:	461d      	mov	r5, r3
 8003866:	eb14 030a 	adds.w	r3, r4, sl
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	eb45 030b 	adc.w	r3, r5, fp
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387e:	4629      	mov	r1, r5
 8003880:	028b      	lsls	r3, r1, #10
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003888:	4621      	mov	r1, r4
 800388a:	028a      	lsls	r2, r1, #10
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	2200      	movs	r2, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800389c:	f7fc fcfc 	bl	8000298 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	3301      	adds	r3, #1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetSysClockFreq+0x184>)
 80038c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3740      	adds	r7, #64	; 0x40
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	00f42400 	.word	0x00f42400
 80038e0:	017d7840 	.word	0x017d7840

080038e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff0 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	080051d8 	.word	0x080051d8

08003924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e041      	b.n	80039ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fb9e 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f000 fa70 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d001      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e044      	b.n	8003a66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <HAL_TIM_Base_Start_IT+0xb0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d018      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x6c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a06:	d013      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x6c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x6c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_TIM_Base_Start_IT+0xb8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d009      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x6c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x6c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d111      	bne.n	8003a54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d010      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a52:	e007      	b.n	8003a64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40014000 	.word	0x40014000

08003a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d020      	beq.n	8003aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01b      	beq.n	8003aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0202 	mvn.w	r2, #2
 8003abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f999 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f98b 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f99c 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d020      	beq.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0204 	mvn.w	r2, #4
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f973 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f965 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f976 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d020      	beq.n	8003b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01b      	beq.n	8003b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0208 	mvn.w	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f94d 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f93f 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f950 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d020      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01b      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0210 	mvn.w	r2, #16
 8003ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f927 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f919 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f92a 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0201 	mvn.w	r2, #1
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc fcd0 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fab6 	bl	8004184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00c      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8fb 	bl	8003e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0220 	mvn.w	r2, #32
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa88 	bl	8004170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_TIM_ConfigClockSource+0x1c>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0b4      	b.n	8003dee <HAL_TIM_ConfigClockSource+0x186>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d03e      	beq.n	8003d3c <HAL_TIM_ConfigClockSource+0xd4>
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	f200 8087 	bhi.w	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	f000 8086 	beq.w	8003dda <HAL_TIM_ConfigClockSource+0x172>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d87f      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d01a      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xa6>
 8003cd8:	2b70      	cmp	r3, #112	; 0x70
 8003cda:	d87b      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d050      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ce0:	2b60      	cmp	r3, #96	; 0x60
 8003ce2:	d877      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b50      	cmp	r3, #80	; 0x50
 8003ce6:	d03c      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ce8:	2b50      	cmp	r3, #80	; 0x50
 8003cea:	d873      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d058      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x13a>
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d86f      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d064      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d86b      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d060      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d867      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05c      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d05a      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	e062      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	f000 f999 	bl	8004054 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]
      break;
 8003d3a:	e04f      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	f000 f982 	bl	8004054 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5e:	609a      	str	r2, [r3, #8]
      break;
 8003d60:	e03c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 f8f6 	bl	8003f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2150      	movs	r1, #80	; 0x50
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f94f 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003d80:	e02c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 f915 	bl	8003fbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2160      	movs	r1, #96	; 0x60
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f93f 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003da0:	e01c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 f8d6 	bl	8003f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2140      	movs	r1, #64	; 0x40
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f92f 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e00c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f000 f926 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003dd2:	e003      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e000      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <TIM_Base_SetConfig+0xfc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <TIM_Base_SetConfig+0x100>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <TIM_Base_SetConfig+0x104>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a35      	ldr	r2, [pc, #212]	; (8003f50 <TIM_Base_SetConfig+0x108>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <TIM_Base_SetConfig+0xfc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01b      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d017      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <TIM_Base_SetConfig+0x100>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a27      	ldr	r2, [pc, #156]	; (8003f4c <TIM_Base_SetConfig+0x104>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00f      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <TIM_Base_SetConfig+0x108>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <TIM_Base_SetConfig+0x10c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <TIM_Base_SetConfig+0x110>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <TIM_Base_SetConfig+0x114>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <TIM_Base_SetConfig+0xfc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]
  }
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 0210 	bic.w	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	f043 0307 	orr.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	431a      	orrs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e050      	b.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d013      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10c      	bne.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4313      	orrs	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40014000 	.word	0x40014000

08004170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <arm_rfft_fast_init_f32>:
 8004198:	084b      	lsrs	r3, r1, #1
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	b410      	push	{r4}
 800419e:	8201      	strh	r1, [r0, #16]
 80041a0:	8003      	strh	r3, [r0, #0]
 80041a2:	d046      	beq.n	8004232 <arm_rfft_fast_init_f32+0x9a>
 80041a4:	d916      	bls.n	80041d4 <arm_rfft_fast_init_f32+0x3c>
 80041a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041aa:	d03c      	beq.n	8004226 <arm_rfft_fast_init_f32+0x8e>
 80041ac:	d928      	bls.n	8004200 <arm_rfft_fast_init_f32+0x68>
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d01f      	beq.n	80041f4 <arm_rfft_fast_init_f32+0x5c>
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b8:	d112      	bne.n	80041e0 <arm_rfft_fast_init_f32+0x48>
 80041ba:	4920      	ldr	r1, [pc, #128]	; (800423c <arm_rfft_fast_init_f32+0xa4>)
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <arm_rfft_fast_init_f32+0xa8>)
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <arm_rfft_fast_init_f32+0xac>)
 80041c0:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80041c4:	8184      	strh	r4, [r0, #12]
 80041c6:	6081      	str	r1, [r0, #8]
 80041c8:	6042      	str	r2, [r0, #4]
 80041ca:	6143      	str	r3, [r0, #20]
 80041cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d0:	2000      	movs	r0, #0
 80041d2:	4770      	bx	lr
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d01c      	beq.n	8004212 <arm_rfft_fast_init_f32+0x7a>
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d006      	beq.n	80041ea <arm_rfft_fast_init_f32+0x52>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d01d      	beq.n	800421c <arm_rfft_fast_init_f32+0x84>
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	2438      	movs	r4, #56	; 0x38
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <arm_rfft_fast_init_f32+0xb0>)
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <arm_rfft_fast_init_f32+0xb4>)
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <arm_rfft_fast_init_f32+0xb8>)
 80041f2:	e7e7      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 80041f4:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80041f8:	4916      	ldr	r1, [pc, #88]	; (8004254 <arm_rfft_fast_init_f32+0xbc>)
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <arm_rfft_fast_init_f32+0xc0>)
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <arm_rfft_fast_init_f32+0xc4>)
 80041fe:	e7e1      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d1ec      	bne.n	80041e0 <arm_rfft_fast_init_f32+0x48>
 8004206:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800420a:	4915      	ldr	r1, [pc, #84]	; (8004260 <arm_rfft_fast_init_f32+0xc8>)
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <arm_rfft_fast_init_f32+0xcc>)
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <arm_rfft_fast_init_f32+0xd0>)
 8004210:	e7d8      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 8004212:	2430      	movs	r4, #48	; 0x30
 8004214:	4915      	ldr	r1, [pc, #84]	; (800426c <arm_rfft_fast_init_f32+0xd4>)
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <arm_rfft_fast_init_f32+0xd8>)
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <arm_rfft_fast_init_f32+0xdc>)
 800421a:	e7d3      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 800421c:	2414      	movs	r4, #20
 800421e:	4916      	ldr	r1, [pc, #88]	; (8004278 <arm_rfft_fast_init_f32+0xe0>)
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <arm_rfft_fast_init_f32+0xe4>)
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <arm_rfft_fast_init_f32+0xe8>)
 8004224:	e7ce      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 8004226:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800422a:	4916      	ldr	r1, [pc, #88]	; (8004284 <arm_rfft_fast_init_f32+0xec>)
 800422c:	4a16      	ldr	r2, [pc, #88]	; (8004288 <arm_rfft_fast_init_f32+0xf0>)
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <arm_rfft_fast_init_f32+0xf4>)
 8004230:	e7c8      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 8004232:	24d0      	movs	r4, #208	; 0xd0
 8004234:	4916      	ldr	r1, [pc, #88]	; (8004290 <arm_rfft_fast_init_f32+0xf8>)
 8004236:	4a17      	ldr	r2, [pc, #92]	; (8004294 <arm_rfft_fast_init_f32+0xfc>)
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <arm_rfft_fast_init_f32+0x100>)
 800423a:	e7c3      	b.n	80041c4 <arm_rfft_fast_init_f32+0x2c>
 800423c:	08013ff0 	.word	0x08013ff0
 8004240:	080051e8 	.word	0x080051e8
 8004244:	0800b358 	.word	0x0800b358
 8004248:	080092e8 	.word	0x080092e8
 800424c:	08015db0 	.word	0x08015db0
 8004250:	080182a0 	.word	0x080182a0
 8004254:	08011cd8 	.word	0x08011cd8
 8004258:	0800fbd8 	.word	0x0800fbd8
 800425c:	08009358 	.word	0x08009358
 8004260:	08017f30 	.word	0x08017f30
 8004264:	0800f358 	.word	0x0800f358
 8004268:	08015fb0 	.word	0x08015fb0
 800426c:	08012b90 	.word	0x08012b90
 8004270:	08011bd8 	.word	0x08011bd8
 8004274:	080091e8 	.word	0x080091e8
 8004278:	08012ae8 	.word	0x08012ae8
 800427c:	0800fb58 	.word	0x0800fb58
 8004280:	08012b10 	.word	0x08012b10
 8004284:	080167b0 	.word	0x080167b0
 8004288:	08012ff0 	.word	0x08012ff0
 800428c:	08016b30 	.word	0x08016b30
 8004290:	080184a0 	.word	0x080184a0
 8004294:	08012bf0 	.word	0x08012bf0
 8004298:	08017b30 	.word	0x08017b30

0800429c <arm_rfft_fast_f32>:
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	8a06      	ldrh	r6, [r0, #16]
 80042a2:	0876      	lsrs	r6, r6, #1
 80042a4:	4607      	mov	r7, r0
 80042a6:	4615      	mov	r5, r2
 80042a8:	8006      	strh	r6, [r0, #0]
 80042aa:	460c      	mov	r4, r1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d15c      	bne.n	800436a <arm_rfft_fast_f32+0xce>
 80042b0:	461a      	mov	r2, r3
 80042b2:	2301      	movs	r3, #1
 80042b4:	f000 fbe4 	bl	8004a80 <arm_cfft_f32>
 80042b8:	edd4 7a00 	vldr	s15, [r4]
 80042bc:	ed94 7a01 	vldr	s14, [r4, #4]
 80042c0:	883e      	ldrh	r6, [r7, #0]
 80042c2:	6978      	ldr	r0, [r7, #20]
 80042c4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80042c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042cc:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80042d0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80042d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042d8:	3e01      	subs	r6, #1
 80042da:	ee26 7a83 	vmul.f32	s14, s13, s6
 80042de:	ee67 7a83 	vmul.f32	s15, s15, s6
 80042e2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80042e6:	ed85 7a00 	vstr	s14, [r5]
 80042ea:	edc5 7a01 	vstr	s15, [r5, #4]
 80042ee:	3010      	adds	r0, #16
 80042f0:	f105 0210 	add.w	r2, r5, #16
 80042f4:	3b08      	subs	r3, #8
 80042f6:	f104 0110 	add.w	r1, r4, #16
 80042fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80042fe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004302:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004306:	edd3 3a03 	vldr	s7, [r3, #12]
 800430a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800430e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004312:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004316:	ee77 4a26 	vadd.f32	s9, s14, s13
 800431a:	ee33 4a85 	vadd.f32	s8, s7, s10
 800431e:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004322:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004326:	ee35 5a63 	vsub.f32	s10, s10, s7
 800432a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800432e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004332:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004336:	ee65 5a84 	vmul.f32	s11, s11, s8
 800433a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800433e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004342:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004346:	ee27 7a03 	vmul.f32	s14, s14, s6
 800434a:	3e01      	subs	r6, #1
 800434c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004350:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004354:	f1a3 0308 	sub.w	r3, r3, #8
 8004358:	f101 0108 	add.w	r1, r1, #8
 800435c:	f100 0008 	add.w	r0, r0, #8
 8004360:	f102 0208 	add.w	r2, r2, #8
 8004364:	d1c9      	bne.n	80042fa <arm_rfft_fast_f32+0x5e>
 8004366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436a:	edd1 7a00 	vldr	s15, [r1]
 800436e:	edd1 6a01 	vldr	s13, [r1, #4]
 8004372:	6941      	ldr	r1, [r0, #20]
 8004374:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004378:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800437c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004380:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004384:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004388:	3e01      	subs	r6, #1
 800438a:	ed82 7a00 	vstr	s14, [r2]
 800438e:	edc2 7a01 	vstr	s15, [r2, #4]
 8004392:	00f0      	lsls	r0, r6, #3
 8004394:	b3ee      	cbz	r6, 8004412 <arm_rfft_fast_f32+0x176>
 8004396:	3808      	subs	r0, #8
 8004398:	f101 0e10 	add.w	lr, r1, #16
 800439c:	4420      	add	r0, r4
 800439e:	f104 0110 	add.w	r1, r4, #16
 80043a2:	f102 0c10 	add.w	ip, r2, #16
 80043a6:	ed90 7a02 	vldr	s14, [r0, #8]
 80043aa:	ed51 6a02 	vldr	s13, [r1, #-8]
 80043ae:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80043b2:	ed90 4a03 	vldr	s8, [r0, #12]
 80043b6:	ed11 5a01 	vldr	s10, [r1, #-4]
 80043ba:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80043be:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80043c2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80043c6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80043ca:	ee77 6a26 	vadd.f32	s13, s14, s13
 80043ce:	ee35 5a44 	vsub.f32	s10, s10, s8
 80043d2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80043d6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80043da:	ee77 7a05 	vadd.f32	s15, s14, s10
 80043de:	ee26 6a24 	vmul.f32	s12, s12, s9
 80043e2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80043e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80043ea:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80043ee:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80043f2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80043f6:	3e01      	subs	r6, #1
 80043f8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80043fc:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004400:	f1a0 0008 	sub.w	r0, r0, #8
 8004404:	f101 0108 	add.w	r1, r1, #8
 8004408:	f10e 0e08 	add.w	lr, lr, #8
 800440c:	f10c 0c08 	add.w	ip, ip, #8
 8004410:	d1c9      	bne.n	80043a6 <arm_rfft_fast_f32+0x10a>
 8004412:	461a      	mov	r2, r3
 8004414:	4629      	mov	r1, r5
 8004416:	4638      	mov	r0, r7
 8004418:	2301      	movs	r3, #1
 800441a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800441e:	f000 bb2f 	b.w	8004a80 <arm_cfft_f32>
 8004422:	bf00      	nop

08004424 <arm_cfft_radix8by2_f32>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	ed2d 8b08 	vpush	{d8-d11}
 800442c:	4607      	mov	r7, r0
 800442e:	4608      	mov	r0, r1
 8004430:	f8b7 e000 	ldrh.w	lr, [r7]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800443a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800443e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004442:	f000 80b0 	beq.w	80045a6 <arm_cfft_radix8by2_f32+0x182>
 8004446:	008b      	lsls	r3, r1, #2
 8004448:	3310      	adds	r3, #16
 800444a:	18c6      	adds	r6, r0, r3
 800444c:	3210      	adds	r2, #16
 800444e:	4443      	add	r3, r8
 8004450:	f100 0510 	add.w	r5, r0, #16
 8004454:	f108 0410 	add.w	r4, r8, #16
 8004458:	ed54 1a04 	vldr	s3, [r4, #-16]
 800445c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004460:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004464:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004468:	ed53 5a02 	vldr	s11, [r3, #-8]
 800446c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004470:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004474:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004478:	ed16 2a04 	vldr	s4, [r6, #-16]
 800447c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004480:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004484:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004488:	ed15 3a04 	vldr	s6, [r5, #-16]
 800448c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004490:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004494:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004498:	ee73 ba21 	vadd.f32	s23, s6, s3
 800449c:	ee36 ba26 	vadd.f32	s22, s12, s13
 80044a0:	ee37 aa27 	vadd.f32	s20, s14, s15
 80044a4:	ee72 9a04 	vadd.f32	s19, s4, s8
 80044a8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80044ac:	ee31 8a05 	vadd.f32	s16, s2, s10
 80044b0:	ee74 aa80 	vadd.f32	s21, s9, s0
 80044b4:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80044b8:	ed45 ba04 	vstr	s23, [r5, #-16]
 80044bc:	ed05 ba03 	vstr	s22, [r5, #-12]
 80044c0:	ed45 aa02 	vstr	s21, [r5, #-8]
 80044c4:	ed05 aa01 	vstr	s20, [r5, #-4]
 80044c8:	ed06 8a01 	vstr	s16, [r6, #-4]
 80044cc:	ed46 9a04 	vstr	s19, [r6, #-16]
 80044d0:	ed06 9a03 	vstr	s18, [r6, #-12]
 80044d4:	ed46 8a02 	vstr	s17, [r6, #-8]
 80044d8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80044dc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80044e0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80044e4:	ed52 2a04 	vldr	s5, [r2, #-16]
 80044e8:	ee33 3a61 	vsub.f32	s6, s6, s3
 80044ec:	ee34 4a42 	vsub.f32	s8, s8, s4
 80044f0:	ee26 8a86 	vmul.f32	s16, s13, s12
 80044f4:	ee24 2a06 	vmul.f32	s4, s8, s12
 80044f8:	ee63 1a22 	vmul.f32	s3, s6, s5
 80044fc:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004500:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004504:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004508:	ee23 6a86 	vmul.f32	s12, s7, s12
 800450c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004510:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004514:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004518:	ee72 3a63 	vsub.f32	s7, s4, s7
 800451c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004520:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004524:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004528:	ed43 3a04 	vstr	s7, [r3, #-16]
 800452c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004534:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004538:	ed12 7a01 	vldr	s14, [r2, #-4]
 800453c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004540:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004544:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004548:	ee67 3a87 	vmul.f32	s7, s15, s14
 800454c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004550:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004554:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004558:	ee64 4a87 	vmul.f32	s9, s9, s14
 800455c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004560:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004564:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004568:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800456c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004570:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004574:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004578:	f1be 0e01 	subs.w	lr, lr, #1
 800457c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004580:	f105 0510 	add.w	r5, r5, #16
 8004584:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004588:	f106 0610 	add.w	r6, r6, #16
 800458c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004590:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004594:	f102 0210 	add.w	r2, r2, #16
 8004598:	f104 0410 	add.w	r4, r4, #16
 800459c:	f103 0310 	add.w	r3, r3, #16
 80045a0:	f47f af5a 	bne.w	8004458 <arm_cfft_radix8by2_f32+0x34>
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	b28c      	uxth	r4, r1
 80045a8:	4621      	mov	r1, r4
 80045aa:	2302      	movs	r3, #2
 80045ac:	f000 fae2 	bl	8004b74 <arm_radix8_butterfly_f32>
 80045b0:	ecbd 8b08 	vpop	{d8-d11}
 80045b4:	4621      	mov	r1, r4
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4640      	mov	r0, r8
 80045ba:	2302      	movs	r3, #2
 80045bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c0:	f000 bad8 	b.w	8004b74 <arm_radix8_butterfly_f32>

080045c4 <arm_cfft_radix8by4_f32>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	ed2d 8b0a 	vpush	{d8-d12}
 80045cc:	8802      	ldrh	r2, [r0, #0]
 80045ce:	ed91 6a00 	vldr	s12, [r1]
 80045d2:	b08f      	sub	sp, #60	; 0x3c
 80045d4:	460f      	mov	r7, r1
 80045d6:	0852      	lsrs	r2, r2, #1
 80045d8:	6841      	ldr	r1, [r0, #4]
 80045da:	900c      	str	r0, [sp, #48]	; 0x30
 80045dc:	0093      	lsls	r3, r2, #2
 80045de:	4638      	mov	r0, r7
 80045e0:	4418      	add	r0, r3
 80045e2:	4606      	mov	r6, r0
 80045e4:	9009      	str	r0, [sp, #36]	; 0x24
 80045e6:	4418      	add	r0, r3
 80045e8:	edd0 6a00 	vldr	s13, [r0]
 80045ec:	ed96 4a00 	vldr	s8, [r6]
 80045f0:	edd6 2a01 	vldr	s5, [r6, #4]
 80045f4:	edd0 7a01 	vldr	s15, [r0, #4]
 80045f8:	900a      	str	r0, [sp, #40]	; 0x28
 80045fa:	ee76 5a26 	vadd.f32	s11, s12, s13
 80045fe:	4604      	mov	r4, r0
 8004600:	4625      	mov	r5, r4
 8004602:	441c      	add	r4, r3
 8004604:	edd4 4a00 	vldr	s9, [r4]
 8004608:	ed97 7a01 	vldr	s14, [r7, #4]
 800460c:	ed94 3a01 	vldr	s6, [r4, #4]
 8004610:	9401      	str	r4, [sp, #4]
 8004612:	ee35 5a84 	vadd.f32	s10, s11, s8
 8004616:	4630      	mov	r0, r6
 8004618:	ee35 5a24 	vadd.f32	s10, s10, s9
 800461c:	463e      	mov	r6, r7
 800461e:	ee15 ea10 	vmov	lr, s10
 8004622:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004626:	f846 eb08 	str.w	lr, [r6], #8
 800462a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800462e:	ed90 5a01 	vldr	s10, [r0, #4]
 8004632:	9605      	str	r6, [sp, #20]
 8004634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004638:	9e01      	ldr	r6, [sp, #4]
 800463a:	9707      	str	r7, [sp, #28]
 800463c:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8004640:	ed96 2a01 	vldr	s4, [r6, #4]
 8004644:	ee36 7a05 	vadd.f32	s14, s12, s10
 8004648:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800464c:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8004650:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004654:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8004658:	4604      	mov	r4, r0
 800465a:	46a3      	mov	fp, r4
 800465c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004660:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004664:	ee14 8a10 	vmov	r8, s8
 8004668:	46a4      	mov	ip, r4
 800466a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800466e:	ed87 7a01 	vstr	s14, [r7, #4]
 8004672:	f84b 8b08 	str.w	r8, [fp], #8
 8004676:	f1ac 0704 	sub.w	r7, ip, #4
 800467a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800467e:	f101 0c08 	add.w	ip, r1, #8
 8004682:	462c      	mov	r4, r5
 8004684:	f8cd c010 	str.w	ip, [sp, #16]
 8004688:	ee15 ca90 	vmov	ip, s11
 800468c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004690:	f844 cb08 	str.w	ip, [r4], #8
 8004694:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004698:	ee36 6a43 	vsub.f32	s12, s12, s6
 800469c:	9406      	str	r4, [sp, #24]
 800469e:	ee76 6a83 	vadd.f32	s13, s13, s6
 80046a2:	f101 0410 	add.w	r4, r1, #16
 80046a6:	0852      	lsrs	r2, r2, #1
 80046a8:	9402      	str	r4, [sp, #8]
 80046aa:	ed85 6a01 	vstr	s12, [r5, #4]
 80046ae:	462c      	mov	r4, r5
 80046b0:	f101 0518 	add.w	r5, r1, #24
 80046b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80046b6:	46b2      	mov	sl, r6
 80046b8:	9503      	str	r5, [sp, #12]
 80046ba:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80046be:	3a02      	subs	r2, #2
 80046c0:	ee16 5a90 	vmov	r5, s13
 80046c4:	46b6      	mov	lr, r6
 80046c6:	4630      	mov	r0, r6
 80046c8:	0852      	lsrs	r2, r2, #1
 80046ca:	f84a 5b08 	str.w	r5, [sl], #8
 80046ce:	f1a0 0604 	sub.w	r6, r0, #4
 80046d2:	edce 7a01 	vstr	s15, [lr, #4]
 80046d6:	9208      	str	r2, [sp, #32]
 80046d8:	f000 8130 	beq.w	800493c <arm_cfft_radix8by4_f32+0x378>
 80046dc:	4691      	mov	r9, r2
 80046de:	9a07      	ldr	r2, [sp, #28]
 80046e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80046e4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80046e8:	3b08      	subs	r3, #8
 80046ea:	f102 0510 	add.w	r5, r2, #16
 80046ee:	f101 0c20 	add.w	ip, r1, #32
 80046f2:	f1a4 020c 	sub.w	r2, r4, #12
 80046f6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80046fa:	4433      	add	r3, r6
 80046fc:	3410      	adds	r4, #16
 80046fe:	4650      	mov	r0, sl
 8004700:	4659      	mov	r1, fp
 8004702:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004706:	ed14 5a02 	vldr	s10, [r4, #-8]
 800470a:	ed91 7a00 	vldr	s14, [r1]
 800470e:	edd0 7a00 	vldr	s15, [r0]
 8004712:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004716:	ed15 4a01 	vldr	s8, [r5, #-4]
 800471a:	edd0 6a01 	vldr	s13, [r0, #4]
 800471e:	ed91 6a01 	vldr	s12, [r1, #4]
 8004722:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004726:	ee34 0a25 	vadd.f32	s0, s8, s11
 800472a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800472e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004732:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004736:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800473a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800473e:	edd1 4a01 	vldr	s9, [r1, #4]
 8004742:	ed90 4a01 	vldr	s8, [r0, #4]
 8004746:	ee70 4a24 	vadd.f32	s9, s0, s9
 800474a:	ee75 aa06 	vadd.f32	s21, s10, s12
 800474e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004752:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004756:	ed45 4a01 	vstr	s9, [r5, #-4]
 800475a:	edd6 1a00 	vldr	s3, [r6]
 800475e:	edd7 0a00 	vldr	s1, [r7]
 8004762:	ed92 4a02 	vldr	s8, [r2, #8]
 8004766:	edd3 3a02 	vldr	s7, [r3, #8]
 800476a:	ed93 2a01 	vldr	s4, [r3, #4]
 800476e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004772:	edd2 2a01 	vldr	s5, [r2, #4]
 8004776:	ed57 9a01 	vldr	s19, [r7, #-4]
 800477a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800477e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004782:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004786:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800478a:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800478e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8004792:	ee18 aa90 	vmov	sl, s17
 8004796:	f847 a908 	str.w	sl, [r7], #-8
 800479a:	edd2 8a01 	vldr	s17, [r2, #4]
 800479e:	ed93 9a01 	vldr	s18, [r3, #4]
 80047a2:	ee73 8a28 	vadd.f32	s17, s6, s17
 80047a6:	ee3a aa27 	vadd.f32	s20, s20, s15
 80047aa:	ee78 8a89 	vadd.f32	s17, s17, s18
 80047ae:	ee74 0a63 	vsub.f32	s1, s8, s7
 80047b2:	edc7 8a01 	vstr	s17, [r7, #4]
 80047b6:	ed18 ba02 	vldr	s22, [r8, #-8]
 80047ba:	ed58 8a01 	vldr	s17, [r8, #-4]
 80047be:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80047c2:	ee6a ba28 	vmul.f32	s23, s20, s17
 80047c6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80047ca:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80047ce:	ee31 9a20 	vadd.f32	s18, s2, s1
 80047d2:	ee79 9a82 	vadd.f32	s19, s19, s4
 80047d6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80047da:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80047de:	ee69 baa8 	vmul.f32	s23, s19, s17
 80047e2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80047e6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80047ea:	ee69 8a28 	vmul.f32	s17, s18, s17
 80047ee:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80047f2:	ee1c aa10 	vmov	sl, s24
 80047f6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80047fa:	f841 ab08 	str.w	sl, [r1], #8
 80047fe:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8004802:	ee3b bacb 	vsub.f32	s22, s23, s22
 8004806:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800480a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800480e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8004812:	edc2 8a01 	vstr	s17, [r2, #4]
 8004816:	ed82 ba02 	vstr	s22, [r2, #8]
 800481a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800481e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8004822:	ee38 8a47 	vsub.f32	s16, s16, s14
 8004826:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800482a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800482e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8004832:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004836:	ee30 0a66 	vsub.f32	s0, s0, s13
 800483a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800483e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004842:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004846:	ee60 9a04 	vmul.f32	s19, s0, s8
 800484a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800484e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004852:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004856:	ee39 4a68 	vsub.f32	s8, s18, s17
 800485a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800485e:	ee14 aa10 	vmov	sl, s8
 8004862:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004866:	ee63 4a24 	vmul.f32	s9, s6, s9
 800486a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800486e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004872:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004876:	f846 a908 	str.w	sl, [r6], #-8
 800487a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800487e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004882:	edc6 3a01 	vstr	s7, [r6, #4]
 8004886:	ee76 6a26 	vadd.f32	s13, s12, s13
 800488a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800488e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8004892:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8004896:	ee67 5a86 	vmul.f32	s11, s15, s12
 800489a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800489e:	ee72 2a62 	vsub.f32	s5, s4, s5
 80048a2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80048a6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80048aa:	ee75 5a25 	vadd.f32	s11, s10, s11
 80048ae:	ee62 0a86 	vmul.f32	s1, s5, s12
 80048b2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80048b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ba:	ee21 6a06 	vmul.f32	s12, s2, s12
 80048be:	ee62 2a87 	vmul.f32	s5, s5, s14
 80048c2:	ee21 1a07 	vmul.f32	s2, s2, s14
 80048c6:	ee15 aa90 	vmov	sl, s11
 80048ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048ce:	f840 ab08 	str.w	sl, [r0], #8
 80048d2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80048d6:	ee76 2a22 	vadd.f32	s5, s12, s5
 80048da:	f1b9 0901 	subs.w	r9, r9, #1
 80048de:	ed40 7a01 	vstr	s15, [r0, #-4]
 80048e2:	f105 0508 	add.w	r5, r5, #8
 80048e6:	ed83 1a02 	vstr	s2, [r3, #8]
 80048ea:	edc3 2a01 	vstr	s5, [r3, #4]
 80048ee:	f108 0808 	add.w	r8, r8, #8
 80048f2:	f1a2 0208 	sub.w	r2, r2, #8
 80048f6:	f10c 0c10 	add.w	ip, ip, #16
 80048fa:	f104 0408 	add.w	r4, r4, #8
 80048fe:	f10e 0e18 	add.w	lr, lr, #24
 8004902:	f1a3 0308 	sub.w	r3, r3, #8
 8004906:	f47f aefc 	bne.w	8004702 <arm_cfft_radix8by4_f32+0x13e>
 800490a:	9908      	ldr	r1, [sp, #32]
 800490c:	9802      	ldr	r0, [sp, #8]
 800490e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004912:	00cb      	lsls	r3, r1, #3
 8004914:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004918:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800491c:	9102      	str	r1, [sp, #8]
 800491e:	9905      	ldr	r1, [sp, #20]
 8004920:	4419      	add	r1, r3
 8004922:	9105      	str	r1, [sp, #20]
 8004924:	9904      	ldr	r1, [sp, #16]
 8004926:	4419      	add	r1, r3
 8004928:	9104      	str	r1, [sp, #16]
 800492a:	9906      	ldr	r1, [sp, #24]
 800492c:	449b      	add	fp, r3
 800492e:	4419      	add	r1, r3
 8004930:	449a      	add	sl, r3
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	9106      	str	r1, [sp, #24]
 8004936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	9a05      	ldr	r2, [sp, #20]
 800493e:	9806      	ldr	r0, [sp, #24]
 8004940:	ed92 4a00 	vldr	s8, [r2]
 8004944:	ed90 7a00 	vldr	s14, [r0]
 8004948:	ed9b 3a00 	vldr	s6, [fp]
 800494c:	edda 3a00 	vldr	s7, [sl]
 8004950:	edd2 4a01 	vldr	s9, [r2, #4]
 8004954:	edd0 6a01 	vldr	s13, [r0, #4]
 8004958:	ed9a 2a01 	vldr	s4, [sl, #4]
 800495c:	eddb 7a01 	vldr	s15, [fp, #4]
 8004960:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004964:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004966:	ee34 6a07 	vadd.f32	s12, s8, s14
 800496a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800496e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8004972:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004976:	ee35 5a23 	vadd.f32	s10, s10, s7
 800497a:	ee34 7a47 	vsub.f32	s14, s8, s14
 800497e:	ed82 5a00 	vstr	s10, [r2]
 8004982:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004986:	edda 4a01 	vldr	s9, [sl, #4]
 800498a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800498e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8004992:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004996:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800499a:	ed82 5a01 	vstr	s10, [r2, #4]
 800499e:	9a04      	ldr	r2, [sp, #16]
 80049a0:	ee34 5aa3 	vadd.f32	s10, s9, s7
 80049a4:	edd2 1a00 	vldr	s3, [r2]
 80049a8:	edd2 2a01 	vldr	s5, [r2, #4]
 80049ac:	9a02      	ldr	r2, [sp, #8]
 80049ae:	ee34 4a42 	vsub.f32	s8, s8, s4
 80049b2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80049b6:	ee64 4a21 	vmul.f32	s9, s8, s3
 80049ba:	ee24 4a22 	vmul.f32	s8, s8, s5
 80049be:	ee65 2a22 	vmul.f32	s5, s10, s5
 80049c2:	ee25 5a21 	vmul.f32	s10, s10, s3
 80049c6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80049ca:	ee35 5a44 	vsub.f32	s10, s10, s8
 80049ce:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80049d2:	edcb 2a00 	vstr	s5, [fp]
 80049d6:	ed8b 5a01 	vstr	s10, [fp, #4]
 80049da:	ed92 4a01 	vldr	s8, [r2, #4]
 80049de:	ed92 5a00 	vldr	s10, [r2]
 80049e2:	9a03      	ldr	r2, [sp, #12]
 80049e4:	ee36 6a63 	vsub.f32	s12, s12, s7
 80049e8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80049ec:	ee66 4a05 	vmul.f32	s9, s12, s10
 80049f0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80049f4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80049f8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80049fc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004a00:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004a04:	ee76 6a83 	vadd.f32	s13, s13, s6
 8004a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a0c:	ed80 6a01 	vstr	s12, [r0, #4]
 8004a10:	edc0 5a00 	vstr	s11, [r0]
 8004a14:	edd2 5a01 	vldr	s11, [r2, #4]
 8004a18:	9807      	ldr	r0, [sp, #28]
 8004a1a:	ee77 7a02 	vadd.f32	s15, s14, s4
 8004a1e:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8004a22:	edd2 6a00 	vldr	s13, [r2]
 8004a26:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8004a2a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004a2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004a32:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004a36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a3a:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004a3e:	edca 7a01 	vstr	s15, [sl, #4]
 8004a42:	ed8a 7a00 	vstr	s14, [sl]
 8004a46:	6872      	ldr	r2, [r6, #4]
 8004a48:	4621      	mov	r1, r4
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	f000 f892 	bl	8004b74 <arm_radix8_butterfly_f32>
 8004a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a52:	6872      	ldr	r2, [r6, #4]
 8004a54:	4621      	mov	r1, r4
 8004a56:	2304      	movs	r3, #4
 8004a58:	f000 f88c 	bl	8004b74 <arm_radix8_butterfly_f32>
 8004a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a5e:	6872      	ldr	r2, [r6, #4]
 8004a60:	4621      	mov	r1, r4
 8004a62:	2304      	movs	r3, #4
 8004a64:	f000 f886 	bl	8004b74 <arm_radix8_butterfly_f32>
 8004a68:	6872      	ldr	r2, [r6, #4]
 8004a6a:	9801      	ldr	r0, [sp, #4]
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	2304      	movs	r3, #4
 8004a70:	b00f      	add	sp, #60	; 0x3c
 8004a72:	ecbd 8b0a 	vpop	{d8-d12}
 8004a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	f000 b87b 	b.w	8004b74 <arm_radix8_butterfly_f32>
 8004a7e:	bf00      	nop

08004a80 <arm_cfft_f32>:
 8004a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a84:	2a01      	cmp	r2, #1
 8004a86:	4606      	mov	r6, r0
 8004a88:	4617      	mov	r7, r2
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	4698      	mov	r8, r3
 8004a8e:	8805      	ldrh	r5, [r0, #0]
 8004a90:	d054      	beq.n	8004b3c <arm_cfft_f32+0xbc>
 8004a92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004a96:	d04c      	beq.n	8004b32 <arm_cfft_f32+0xb2>
 8004a98:	d916      	bls.n	8004ac8 <arm_cfft_f32+0x48>
 8004a9a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004a9e:	d01a      	beq.n	8004ad6 <arm_cfft_f32+0x56>
 8004aa0:	d95c      	bls.n	8004b5c <arm_cfft_f32+0xdc>
 8004aa2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004aa6:	d044      	beq.n	8004b32 <arm_cfft_f32+0xb2>
 8004aa8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004aac:	d105      	bne.n	8004aba <arm_cfft_f32+0x3a>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	6872      	ldr	r2, [r6, #4]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 f85d 	bl	8004b74 <arm_radix8_butterfly_f32>
 8004aba:	f1b8 0f00 	cmp.w	r8, #0
 8004abe:	d111      	bne.n	8004ae4 <arm_cfft_f32+0x64>
 8004ac0:	2f01      	cmp	r7, #1
 8004ac2:	d016      	beq.n	8004af2 <arm_cfft_f32+0x72>
 8004ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac8:	2d20      	cmp	r5, #32
 8004aca:	d032      	beq.n	8004b32 <arm_cfft_f32+0xb2>
 8004acc:	d94a      	bls.n	8004b64 <arm_cfft_f32+0xe4>
 8004ace:	2d40      	cmp	r5, #64	; 0x40
 8004ad0:	d0ed      	beq.n	8004aae <arm_cfft_f32+0x2e>
 8004ad2:	2d80      	cmp	r5, #128	; 0x80
 8004ad4:	d1f1      	bne.n	8004aba <arm_cfft_f32+0x3a>
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff fca3 	bl	8004424 <arm_cfft_radix8by2_f32>
 8004ade:	f1b8 0f00 	cmp.w	r8, #0
 8004ae2:	d0ed      	beq.n	8004ac0 <arm_cfft_f32+0x40>
 8004ae4:	68b2      	ldr	r2, [r6, #8]
 8004ae6:	89b1      	ldrh	r1, [r6, #12]
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7fb fb75 	bl	80001d8 <arm_bitreversal_32>
 8004aee:	2f01      	cmp	r7, #1
 8004af0:	d1e8      	bne.n	8004ac4 <arm_cfft_f32+0x44>
 8004af2:	ee07 5a90 	vmov	s15, r5
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	d0de      	beq.n	8004ac4 <arm_cfft_f32+0x44>
 8004b06:	f104 0108 	add.w	r1, r4, #8
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	f101 0108 	add.w	r1, r1, #8
 8004b14:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004b18:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004b1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004b20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004b24:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004b28:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004b2c:	d1ee      	bne.n	8004b0c <arm_cfft_f32+0x8c>
 8004b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b32:	4621      	mov	r1, r4
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff fd45 	bl	80045c4 <arm_cfft_radix8by4_f32>
 8004b3a:	e7be      	b.n	8004aba <arm_cfft_f32+0x3a>
 8004b3c:	b1ad      	cbz	r5, 8004b6a <arm_cfft_f32+0xea>
 8004b3e:	f101 030c 	add.w	r3, r1, #12
 8004b42:	2200      	movs	r2, #0
 8004b44:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004b48:	3201      	adds	r2, #1
 8004b4a:	eef1 7a67 	vneg.f32	s15, s15
 8004b4e:	4295      	cmp	r5, r2
 8004b50:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004b54:	f103 0308 	add.w	r3, r3, #8
 8004b58:	d1f4      	bne.n	8004b44 <arm_cfft_f32+0xc4>
 8004b5a:	e79a      	b.n	8004a92 <arm_cfft_f32+0x12>
 8004b5c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004b60:	d0a5      	beq.n	8004aae <arm_cfft_f32+0x2e>
 8004b62:	e7aa      	b.n	8004aba <arm_cfft_f32+0x3a>
 8004b64:	2d10      	cmp	r5, #16
 8004b66:	d0b6      	beq.n	8004ad6 <arm_cfft_f32+0x56>
 8004b68:	e7a7      	b.n	8004aba <arm_cfft_f32+0x3a>
 8004b6a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004b6e:	d894      	bhi.n	8004a9a <arm_cfft_f32+0x1a>
 8004b70:	e7aa      	b.n	8004ac8 <arm_cfft_f32+0x48>
 8004b72:	bf00      	nop

08004b74 <arm_radix8_butterfly_f32>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	ed2d 8b10 	vpush	{d8-d15}
 8004b7c:	461c      	mov	r4, r3
 8004b7e:	b09d      	sub	sp, #116	; 0x74
 8004b80:	4603      	mov	r3, r0
 8004b82:	3304      	adds	r3, #4
 8004b84:	ed9f bac4 	vldr	s22, [pc, #784]	; 8004e98 <arm_radix8_butterfly_f32+0x324>
 8004b88:	9019      	str	r0, [sp, #100]	; 0x64
 8004b8a:	921a      	str	r2, [sp, #104]	; 0x68
 8004b8c:	468b      	mov	fp, r1
 8004b8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b90:	468a      	mov	sl, r1
 8004b92:	46a1      	mov	r9, r4
 8004b94:	4607      	mov	r7, r0
 8004b96:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004b9a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004b9e:	eb03 0508 	add.w	r5, r3, r8
 8004ba2:	195c      	adds	r4, r3, r5
 8004ba4:	00de      	lsls	r6, r3, #3
 8004ba6:	191a      	adds	r2, r3, r4
 8004ba8:	9600      	str	r6, [sp, #0]
 8004baa:	1898      	adds	r0, r3, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	9e00      	ldr	r6, [sp, #0]
 8004bb0:	9311      	str	r3, [sp, #68]	; 0x44
 8004bb2:	4401      	add	r1, r0
 8004bb4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004bb8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004bbc:	19be      	adds	r6, r7, r6
 8004bbe:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004bc2:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8004bc6:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8004bca:	9f00      	ldr	r7, [sp, #0]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	eb06 0e07 	add.w	lr, r6, r7
 8004bd2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004bd4:	9302      	str	r3, [sp, #8]
 8004bd6:	3204      	adds	r2, #4
 8004bd8:	3104      	adds	r1, #4
 8004bda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bde:	f04f 0c00 	mov.w	ip, #0
 8004be2:	edde 7a00 	vldr	s15, [lr]
 8004be6:	edd6 6a00 	vldr	s13, [r6]
 8004bea:	ed95 2a00 	vldr	s4, [r5]
 8004bee:	ed17 aa01 	vldr	s20, [r7, #-4]
 8004bf2:	edd4 4a00 	vldr	s9, [r4]
 8004bf6:	ed90 5a00 	vldr	s10, [r0]
 8004bfa:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004bfe:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004c02:	ee77 8a85 	vadd.f32	s17, s15, s10
 8004c06:	ee76 3a87 	vadd.f32	s7, s13, s14
 8004c0a:	ee32 4a20 	vadd.f32	s8, s4, s1
 8004c0e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8004c12:	ee33 6a84 	vadd.f32	s12, s7, s8
 8004c16:	ee73 5a28 	vadd.f32	s11, s6, s17
 8004c1a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c1e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8004c22:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8004c26:	ed47 6a01 	vstr	s13, [r7, #-4]
 8004c2a:	edc4 5a00 	vstr	s11, [r4]
 8004c2e:	ed92 9a00 	vldr	s18, [r2]
 8004c32:	ed95 1a01 	vldr	s2, [r5, #4]
 8004c36:	edd6 5a01 	vldr	s11, [r6, #4]
 8004c3a:	ed91 6a00 	vldr	s12, [r1]
 8004c3e:	edd7 2a00 	vldr	s5, [r7]
 8004c42:	edd4 1a01 	vldr	s3, [r4, #4]
 8004c46:	edde 6a01 	vldr	s13, [lr, #4]
 8004c4a:	edd0 9a01 	vldr	s19, [r0, #4]
 8004c4e:	ee72 0a60 	vsub.f32	s1, s4, s1
 8004c52:	ee71 aa46 	vsub.f32	s21, s2, s12
 8004c56:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8004c5a:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004c5e:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8004c62:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004c66:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8004c6a:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8004c6e:	ee75 5a89 	vadd.f32	s11, s11, s18
 8004c72:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004c76:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8004c7a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004c7e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004c82:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8004c86:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004c8a:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004c8e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004c92:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8004c96:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004c9a:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004c9e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004ca2:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004ca6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004caa:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004cae:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8004cb2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004cb6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004cba:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004cbe:	ee71 5a49 	vsub.f32	s11, s2, s18
 8004cc2:	ee31 2a09 	vadd.f32	s4, s2, s18
 8004cc6:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004cca:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004cce:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8004cd2:	ee73 0a06 	vadd.f32	s1, s6, s12
 8004cd6:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8004cda:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004cde:	ee32 8a28 	vadd.f32	s16, s4, s17
 8004ce2:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004ce6:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004cea:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004cee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004cf2:	ee71 5a64 	vsub.f32	s11, s2, s9
 8004cf6:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8004cfa:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004cfe:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004d02:	ee74 4a81 	vadd.f32	s9, s9, s2
 8004d06:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8004d0a:	44dc      	add	ip, fp
 8004d0c:	45e2      	cmp	sl, ip
 8004d0e:	ed87 8a00 	vstr	s16, [r7]
 8004d12:	ed84 2a01 	vstr	s4, [r4, #4]
 8004d16:	441f      	add	r7, r3
 8004d18:	edce 0a00 	vstr	s1, [lr]
 8004d1c:	441c      	add	r4, r3
 8004d1e:	ed80 6a00 	vstr	s12, [r0]
 8004d22:	edce 1a01 	vstr	s3, [lr, #4]
 8004d26:	ed80 4a01 	vstr	s8, [r0, #4]
 8004d2a:	449e      	add	lr, r3
 8004d2c:	ed86 3a00 	vstr	s6, [r6]
 8004d30:	4418      	add	r0, r3
 8004d32:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004d36:	ed02 5a01 	vstr	s10, [r2, #-4]
 8004d3a:	ed85 7a00 	vstr	s14, [r5]
 8004d3e:	edc6 5a01 	vstr	s11, [r6, #4]
 8004d42:	edc1 4a00 	vstr	s9, [r1]
 8004d46:	441e      	add	r6, r3
 8004d48:	edc2 6a00 	vstr	s13, [r2]
 8004d4c:	4419      	add	r1, r3
 8004d4e:	edc5 7a01 	vstr	s15, [r5, #4]
 8004d52:	441a      	add	r2, r3
 8004d54:	441d      	add	r5, r3
 8004d56:	f63f af44 	bhi.w	8004be2 <arm_radix8_butterfly_f32+0x6e>
 8004d5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004d5c:	2a07      	cmp	r2, #7
 8004d5e:	f240 81f5 	bls.w	800514c <arm_radix8_butterfly_f32+0x5d8>
 8004d62:	f108 0101 	add.w	r1, r8, #1
 8004d66:	188f      	adds	r7, r1, r2
 8004d68:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8004d6c:	19d6      	adds	r6, r2, r7
 8004d6e:	eb08 0c09 	add.w	ip, r8, r9
 8004d72:	1994      	adds	r4, r2, r6
 8004d74:	eb0c 0e09 	add.w	lr, ip, r9
 8004d78:	4610      	mov	r0, r2
 8004d7a:	9701      	str	r7, [sp, #4]
 8004d7c:	4420      	add	r0, r4
 8004d7e:	eb0e 0709 	add.w	r7, lr, r9
 8004d82:	1815      	adds	r5, r2, r0
 8004d84:	eb07 0209 	add.w	r2, r7, r9
 8004d88:	9203      	str	r2, [sp, #12]
 8004d8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d90:	9117      	str	r1, [sp, #92]	; 0x5c
 8004d92:	440a      	add	r2, r1
 8004d94:	9900      	ldr	r1, [sp, #0]
 8004d96:	3108      	adds	r1, #8
 8004d98:	9100      	str	r1, [sp, #0]
 8004d9a:	9902      	ldr	r1, [sp, #8]
 8004d9c:	3108      	adds	r1, #8
 8004d9e:	9102      	str	r1, [sp, #8]
 8004da0:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004da2:	00ff      	lsls	r7, r7, #3
 8004da4:	9715      	str	r7, [sp, #84]	; 0x54
 8004da6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8004daa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004dae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8004db2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004db4:	9903      	ldr	r1, [sp, #12]
 8004db6:	19d7      	adds	r7, r2, r7
 8004db8:	00c9      	lsls	r1, r1, #3
 8004dba:	9114      	str	r1, [sp, #80]	; 0x50
 8004dbc:	9710      	str	r7, [sp, #64]	; 0x40
 8004dbe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004dc0:	9f00      	ldr	r7, [sp, #0]
 8004dc2:	19cf      	adds	r7, r1, r7
 8004dc4:	970d      	str	r7, [sp, #52]	; 0x34
 8004dc6:	9f02      	ldr	r7, [sp, #8]
 8004dc8:	19cf      	adds	r7, r1, r7
 8004dca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004dce:	970c      	str	r7, [sp, #48]	; 0x30
 8004dd0:	9f01      	ldr	r7, [sp, #4]
 8004dd2:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8004dd6:	3504      	adds	r5, #4
 8004dd8:	3004      	adds	r0, #4
 8004dda:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004dde:	9508      	str	r5, [sp, #32]
 8004de0:	9009      	str	r0, [sp, #36]	; 0x24
 8004de2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004de4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004de6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8004dea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004dee:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8004df2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004df4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004df8:	1945      	adds	r5, r0, r5
 8004dfa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004dfe:	460f      	mov	r7, r1
 8004e00:	3404      	adds	r4, #4
 8004e02:	4641      	mov	r1, r8
 8004e04:	1841      	adds	r1, r0, r1
 8004e06:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8004e0a:	940a      	str	r4, [sp, #40]	; 0x28
 8004e0c:	eb00 0c06 	add.w	ip, r0, r6
 8004e10:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e14:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004e16:	9506      	str	r5, [sp, #24]
 8004e18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004e1a:	9105      	str	r1, [sp, #20]
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	1905      	adds	r5, r0, r4
 8004e20:	3108      	adds	r1, #8
 8004e22:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004e24:	9507      	str	r5, [sp, #28]
 8004e26:	910f      	str	r1, [sp, #60]	; 0x3c
 8004e28:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	eb00 0e06 	add.w	lr, r0, r6
 8004e32:	9518      	str	r5, [sp, #96]	; 0x60
 8004e34:	9404      	str	r4, [sp, #16]
 8004e36:	9103      	str	r1, [sp, #12]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	9e06      	ldr	r6, [sp, #24]
 8004e3e:	ed90 fa00 	vldr	s30, [r0]
 8004e42:	edd6 7a01 	vldr	s15, [r6, #4]
 8004e46:	edd0 ba01 	vldr	s23, [r0, #4]
 8004e4a:	edcd 7a00 	vstr	s15, [sp]
 8004e4e:	a80d      	add	r0, sp, #52	; 0x34
 8004e50:	edde 7a01 	vldr	s15, [lr, #4]
 8004e54:	9c05      	ldr	r4, [sp, #20]
 8004e56:	9d07      	ldr	r5, [sp, #28]
 8004e58:	edd2 fa00 	vldr	s31, [r2]
 8004e5c:	ed92 ca01 	vldr	s24, [r2, #4]
 8004e60:	edcd 7a01 	vstr	s15, [sp, #4]
 8004e64:	c807      	ldmia	r0, {r0, r1, r2}
 8004e66:	eddc 7a01 	vldr	s15, [ip, #4]
 8004e6a:	edd4 ea00 	vldr	s29, [r4]
 8004e6e:	ed95 ea00 	vldr	s28, [r5]
 8004e72:	edd6 da00 	vldr	s27, [r6]
 8004e76:	edd4 aa01 	vldr	s21, [r4, #4]
 8004e7a:	ed95 aa01 	vldr	s20, [r5, #4]
 8004e7e:	ed9e da00 	vldr	s26, [lr]
 8004e82:	eddc ca00 	vldr	s25, [ip]
 8004e86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004e8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004e90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e92:	edcd 7a02 	vstr	s15, [sp, #8]
 8004e96:	e001      	b.n	8004e9c <arm_radix8_butterfly_f32+0x328>
 8004e98:	3f3504f3 	.word	0x3f3504f3
 8004e9c:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004ea0:	ed91 5a00 	vldr	s10, [r1]
 8004ea4:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004ea8:	edd5 7a00 	vldr	s15, [r5]
 8004eac:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004eb0:	edd2 3a00 	vldr	s7, [r2]
 8004eb4:	ed94 3a00 	vldr	s6, [r4]
 8004eb8:	ed90 2a00 	vldr	s4, [r0]
 8004ebc:	ed92 0a01 	vldr	s0, [r2, #4]
 8004ec0:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004ec4:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004ec8:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004ecc:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004ed0:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004ed4:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004ed8:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004edc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ee4:	ed82 6a00 	vstr	s12, [r2]
 8004ee8:	edd5 8a01 	vldr	s17, [r5, #4]
 8004eec:	ed90 9a01 	vldr	s18, [r0, #4]
 8004ef0:	edd6 2a00 	vldr	s5, [r6]
 8004ef4:	ed98 7a00 	vldr	s14, [r8]
 8004ef8:	edd4 0a01 	vldr	s1, [r4, #4]
 8004efc:	ed91 6a01 	vldr	s12, [r1, #4]
 8004f00:	edd7 5a00 	vldr	s11, [r7]
 8004f04:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004f08:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004f0c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004f10:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004f14:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004f18:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004f1c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004f20:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004f24:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004f28:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004f2c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004f30:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004f34:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004f38:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004f3c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004f40:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004f44:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004f48:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004f4c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004f50:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004f54:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004f58:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004f5c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004f60:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004f64:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004f68:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004f6c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004f70:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004f74:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004f78:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004f7c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004f80:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004f84:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004f88:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004f8c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004f90:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004f94:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004f98:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004f9c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004fa0:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004fa4:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004fa8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004fac:	ee30 0a80 	vadd.f32	s0, s1, s0
 8004fb0:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004fb4:	ee33 6a06 	vadd.f32	s12, s6, s12
 8004fb8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004fbc:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004fc0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004fc4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004fc8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004fcc:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004fd0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004fd4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004fd8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004fdc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004fe0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004fe4:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004fe8:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004fec:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004ff0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004ff4:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004ff8:	ed82 1a01 	vstr	s2, [r2, #4]
 8004ffc:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005000:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005004:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005008:	ed81 3a00 	vstr	s6, [r1]
 800500c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005010:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005014:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005018:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800501c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005020:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005024:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005028:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800502c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005030:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005034:	ed9d 4a00 	vldr	s8, [sp]
 8005038:	edc1 6a01 	vstr	s13, [r1, #4]
 800503c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005040:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005044:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005048:	ee24 4a25 	vmul.f32	s8, s8, s11
 800504c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005050:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005054:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005058:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800505c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005060:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005064:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005068:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800506c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005070:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005074:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005078:	ee70 0a84 	vadd.f32	s1, s1, s8
 800507c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005080:	44d9      	add	r9, fp
 8005082:	45ca      	cmp	sl, r9
 8005084:	ed84 9a00 	vstr	s18, [r4]
 8005088:	edc4 3a01 	vstr	s7, [r4, #4]
 800508c:	441a      	add	r2, r3
 800508e:	ed07 7a01 	vstr	s14, [r7, #-4]
 8005092:	edc7 2a00 	vstr	s5, [r7]
 8005096:	4419      	add	r1, r3
 8005098:	ed80 2a00 	vstr	s4, [r0]
 800509c:	ed80 8a01 	vstr	s16, [r0, #4]
 80050a0:	441c      	add	r4, r3
 80050a2:	ed48 1a01 	vstr	s3, [r8, #-4]
 80050a6:	ed88 0a00 	vstr	s0, [r8]
 80050aa:	441f      	add	r7, r3
 80050ac:	ed46 4a01 	vstr	s9, [r6, #-4]
 80050b0:	4418      	add	r0, r3
 80050b2:	edc6 9a00 	vstr	s19, [r6]
 80050b6:	4498      	add	r8, r3
 80050b8:	edc5 0a00 	vstr	s1, [r5]
 80050bc:	ed85 6a01 	vstr	s12, [r5, #4]
 80050c0:	441e      	add	r6, r3
 80050c2:	441d      	add	r5, r3
 80050c4:	f63f aeea 	bhi.w	8004e9c <arm_radix8_butterfly_f32+0x328>
 80050c8:	9a03      	ldr	r2, [sp, #12]
 80050ca:	9818      	ldr	r0, [sp, #96]	; 0x60
 80050cc:	3201      	adds	r2, #1
 80050ce:	4611      	mov	r1, r2
 80050d0:	9203      	str	r2, [sp, #12]
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	4402      	add	r2, r0
 80050d6:	9204      	str	r2, [sp, #16]
 80050d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80050da:	9a05      	ldr	r2, [sp, #20]
 80050dc:	4402      	add	r2, r0
 80050de:	9205      	str	r2, [sp, #20]
 80050e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80050e2:	9a07      	ldr	r2, [sp, #28]
 80050e4:	4402      	add	r2, r0
 80050e6:	9207      	str	r2, [sp, #28]
 80050e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80050ea:	9a06      	ldr	r2, [sp, #24]
 80050ec:	4402      	add	r2, r0
 80050ee:	9206      	str	r2, [sp, #24]
 80050f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050f2:	4496      	add	lr, r2
 80050f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050f6:	4494      	add	ip, r2
 80050f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050fa:	3208      	adds	r2, #8
 80050fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80050fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005100:	3208      	adds	r2, #8
 8005102:	920e      	str	r2, [sp, #56]	; 0x38
 8005104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005106:	3208      	adds	r2, #8
 8005108:	920d      	str	r2, [sp, #52]	; 0x34
 800510a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800510c:	3208      	adds	r2, #8
 800510e:	920c      	str	r2, [sp, #48]	; 0x30
 8005110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005112:	3208      	adds	r2, #8
 8005114:	920b      	str	r2, [sp, #44]	; 0x2c
 8005116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005118:	3208      	adds	r2, #8
 800511a:	920a      	str	r2, [sp, #40]	; 0x28
 800511c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800511e:	3208      	adds	r2, #8
 8005120:	9209      	str	r2, [sp, #36]	; 0x24
 8005122:	9a08      	ldr	r2, [sp, #32]
 8005124:	3208      	adds	r2, #8
 8005126:	9208      	str	r2, [sp, #32]
 8005128:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800512a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800512c:	4288      	cmp	r0, r1
 800512e:	4622      	mov	r2, r4
 8005130:	d007      	beq.n	8005142 <arm_radix8_butterfly_f32+0x5ce>
 8005132:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005134:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005138:	4621      	mov	r1, r4
 800513a:	4401      	add	r1, r0
 800513c:	9110      	str	r1, [sp, #64]	; 0x40
 800513e:	9804      	ldr	r0, [sp, #16]
 8005140:	e67c      	b.n	8004e3c <arm_radix8_butterfly_f32+0x2c8>
 8005142:	4683      	mov	fp, r0
 8005144:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8005148:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800514a:	e524      	b.n	8004b96 <arm_radix8_butterfly_f32+0x22>
 800514c:	b01d      	add	sp, #116	; 0x74
 800514e:	ecbd 8b10 	vpop	{d8-d15}
 8005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005156:	bf00      	nop

08005158 <memset>:
 8005158:	4402      	add	r2, r0
 800515a:	4603      	mov	r3, r0
 800515c:	4293      	cmp	r3, r2
 800515e:	d100      	bne.n	8005162 <memset+0xa>
 8005160:	4770      	bx	lr
 8005162:	f803 1b01 	strb.w	r1, [r3], #1
 8005166:	e7f9      	b.n	800515c <memset+0x4>

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f000 f818 	bl	80051b0 <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	08018648 	.word	0x08018648
 80051a4:	08018648 	.word	0x08018648
 80051a8:	08018648 	.word	0x08018648
 80051ac:	0801864c 	.word	0x0801864c

080051b0 <_init>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr

080051bc <_fini>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr
